<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ぽっちぽちにしてやんよ]]></title>
  <link href="http://pchw.github.com/atom.xml" rel="self"/>
  <link href="http://pchw.github.com/"/>
  <updated>2012-07-06T11:33:35+09:00</updated>
  <id>http://pchw.github.com/</id>
  <author>
    <name><![CDATA[pchw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.15のすげえアップデート]]></title>
    <link href="http://pchw.github.com/blog/2012/07/06/1-dot-15/"/>
    <updated>2012-07-06T10:23:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/07/06/1-dot-15</id>
    <content type="html"><![CDATA[<p>RubyMotion 1.15ですごいアップデートが来るよってlrzさんが言ってました．</p>

<blockquote class="twitter-tweet" lang="ja"><p>Integrating a super cool new feature in RubyMotion. Will ship next week.</p>&mdash; Laurent Sansonettiさん (@lrz) <a href="https://twitter.com/lrz/status/218664619009519617" data-datetime="2012-06-29T11:18:02+00:00">6月 29, 2012</a></blockquote>


<script src="http://pchw.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>それが今日来たのですが，スーパークールなニューフィーチャーはTestFrameworkに関するものでした．</p>

<p>今までRubyMotionはbaconを使ったTestFrameworkが使われていて，
<code>rake spec</code>とするとSimulatorが実行されメソッドを呼んで値を検証してという形でした．</p>

<p>今回のアップデートでは，指でタップしたりDeviceイベント（画面を回転させたり）といったこともテストで出来るようになりました．</p>

<p>ObjC + XcodeだとjsでUIAutomationのテストを行うらしいんですが（やったことない），その機能がRubyMotionのbaconに統合された感じです．</p>

<pre><code>describe "The Timer view controller" do
  tests TimerController

  it "start a timer" do
    tap 'Start'
    controller.timer.isValid.should == true
  end
end
</code></pre>

<p>とすれば，<code>Start</code>というLabelのついてるButtonをタップしてcontrollerのtimerを検証してます．</p>

<p>実際にVideoを見てもらうのが早いと思います．Viewがガンガン動いて面白いです．</p>

<iframe src="http://player.vimeo.com/video/45193144" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>公式Blogの情報は<a href="http://blog.rubymotion.com/post/26489000626/functional-view-and-controller-testing-with-rubymotion">こちら</a></p>

<p>ドキュメントは<a href="http://www.rubymotion.com/developer-center/articles/testing/#_views_and_controllers_testing">こちら</a></p>

<p>7/21(日)に行われる<a href="http://connpass.com/event/665/">第一回RubyMotion勉強会</a>での発表ネタは今回のアップデートのテストに関することにしようと思います．
あと５人ぐらい空きがあるようですね．</p>

<p>他のアップデートは↓のような感じです．</p>

<h2>更新履歴（訳）</h2>

<ul>
<li>UIAutomationの機能を使えるTestが書けるようになったし，jsじゃなくてpure Rubyで書ける．</li>
<li>spec/helpersの中のファイルが<code>rake spec</code>で使われるようになったよ</li>
<li><code>rake spec</code>にfileオプションが追加されて，テストする対象が選べるようになったよ．</li>
<li><code>RUBYMOTION_ENV</code>で実行時にtestなのかdevelopmentなのかreleaseなのかを判別出来る様になった．</li>
<li>rake staticが追加されてuniversal statc libraryを作れるようになった．</li>
<li>weak frameworkのサポート(app.weak_freameworks &lt;&lt; &#8216;Twitter&#8217;とかする)</li>
<li>symlinkのファイルがresourceディレクトリに入っていた場合にコピーされてたのを修正．</li>
</ul>


<h2>更新履歴（原文）</h2>

<pre><code>= RubyMotion 1.15 =

  * Improved the spec framework to leverage UIAutomation's functionality. This
    lets you write functional tests on views and controllers by using the same
    event generators, but in pure Ruby (and not Javascript).
    Check http://www.rubymotion.com/developer-center/articles/testing for more
    information about the new API. Feature contributed by Eloy Duran.
  * Introduced spec helpers. `rake spec' will now honor the files inside the
    `spec/helpers' directory (if it exists) and compile them before the spec
    files.
  * Introduced the `files' option to `rake spec', which can be used to filter
    the spec files that should be run. Filters can be either the basename of
    a spec file or its full path, and are separated by a comma.
    Example: rake spec files=main_spec,kvo_spec,spec/foo_spec.rb 
  * Introduced the RUBYMOTION_ENV constant in the runtime which can have one of
    the following string values: 'test', 'development' and 'release'.
  * Introduced the `rake static' task which creates a universal static library
    containing the project's object files and the RubyMotion runtime, which is
    suitable for inclusion in Objective-C/Xcode projects. 
  * Introduced weak frameworks support. The `app.weak_frameworks' setting can
    be set to an array of framework names, similar to how `app.frameworks'
    works (ex. app.weak_frameworks += ['Twitter']). Patch by Satoshi Ebisawa.
  * Fixed a bug in the build system where  files within symlinks inside of the
    resources directory would not be copied. Patch by Nick Quaranto.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] Nitronを使ってOutletやActionっぽいことできるよ]]></title>
    <link href="http://pchw.github.com/blog/2012/06/26/nitron/"/>
    <updated>2012-06-26T00:10:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/26/nitron</id>
    <content type="html"><![CDATA[<p>前に<a href="http://pchw.github.com/blog/2012/05/22/storyboard/">Storyboardを使ってRubyMotionで開発する方法</a>とか<a href="http://pchw.github.com/blog/2012/05/22/ib/">[RubyMotion] InterfaceBuilderと合わせて使って楽をしよう</a>いう記事を書いたのですが，IdentifierとかTagを使ったりでちょっと面倒くさかったり，コントロールが増えてくるとTag番号がどのコントロールかわからなくなったりで煩雑でした．</p>

<p>そこで，Nitronというライブラリを使って普通のXcode+ObjCで言うIBOutletとかIBAction的なことを簡単にやりましょうという記事です．</p>

<p><a href="https://github.com/mattgreen/nitron">Nitron</a></p>

<p>公式のgithub内のWikiに<a href="https://github.com/mattgreen/nitron/wiki/Tutorial">チュートリアル</a>がありますが，ModelやNitronのViewControllerとかの説明やCoreData周りなどにも言及していてOutlet的なところだけやりたい人にはちょっと大掛かりです．</p>

<p>そのため，今回は本当にOutletやAction周りだけを使いたい人向けのシンプルコースです．</p>

<h2>Nitroのインストール</h2>

<pre><code>$ gem install nitron
</code></pre>

<p>なにはともあれgemインストール．</p>

<h2>プロジェクトの作成</h2>

<pre><code>$ motion create simplenitro
</code></pre>

<h2>app_delegate.rb の削除</h2>

<p>Nitronはapp_delegateに書いてあるようなのがライブラリ内部で勝手にやってくれます．
app_delegate.rbがあると，そちらが優先されてしまい，何も画面に出なくてハマるのでサクッと削除しておきます．</p>

<pre><code>$ rm app/app_delegate.rb
</code></pre>

<h2>Rakefile</h2>

<pre><code>$ cat Rakefile
# -*- coding: utf-8 -*-
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'rubygems'
require 'nitron'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'simplenitro'
end
</code></pre>

<p><code>require 'rubygems'</code>と<code>require 'nitron'</code>を追加するだけですね．
公式だと，Bundlerを使う方法が紹介されてます．</p>

<h2>storyboardの追加</h2>

<p>公式では，普通にXcodeのプロジェクトを作ってますが，要らないファイルが死ぬほど付いてくるので，単にXcodeを立ちあげてstoryboardファイルだけ追加しましょう．</p>

<p><code>File&gt;New&gt;File</code>で<code>iOS&gt;User Interface&gt;Storyboard</code>を選べばよいです．</p>

<p><img src="http://pchw.github.com/images/nitron_storyboard.png" alt="new Storyboard" /></p>

<p>名前は<code>MainStoryboard.storyboard</code>にして，<code>./resources</code>に作成します．</p>

<h2>UINavigationControllerとUIViewControllerの追加</h2>

<p>こうやって作ったStoryboardには何も置かれていないので，<code>UINavigationController</code>を置きます．</p>

<p><img src="http://pchw.github.com/images/nitron_navigation.png" alt="navigation" /></p>

<p>不要な<code>UITableViewController</code>がくっついて来るので<code>delete</code>ボタンで消します．</p>

<p><code>UIViewController</code>をD&amp;Dして置きます．</p>

<p><code>UINavigationController</code>を選択してUtility View（右側のペイン）の一番右のタブを選んで<code>RelationShip</code>の所から引っ張って，追加した<code>UIViewController</code>に繋ぎます．</p>

<p><img src="http://pchw.github.com/images/nitron_rvc.png" alt="root view controller" /></p>

<p><code>UIViewController</code>を選択して，Utility Viewの左から３番目のタブを選んで，Classを<code>RootViewController</code>とかにしておきます．</p>

<h2>UITextFieldとUIButtonの追加</h2>

<p>そのままでは何もないので，入力欄とボタンを追加します．</p>

<p><img src="http://pchw.github.com/images/nitron_control.png" alt="control" /></p>

<p>UITextFieldを選択して，Utility Viewの左から３番目のタブを選んで，
<code>User Defined Runtime Attributes</code>のところの + を選択して</p>

<ul>
<li>KeyPath: outlet</li>
<li>Type: String</li>
<li>Value: randomText</li>
</ul>


<p>とします．</p>

<p><img src="http://pchw.github.com/images/nitron_outlet.png" alt="outlet" /></p>

<p>同様にUIButtonの方も</p>

<ul>
<li>KeyPath: outlet</li>
<li>Type: String</li>
<li>Value: random</li>
</ul>


<p>としておきます．</p>

<p>この時点でstoryboardの操作は終わりなので保存して閉じます．</p>

<h2>RootViewControllerの追加</h2>

<p><code>root_view_controller.rb</code>を追加して，RootViewControllerクラスを作成します．</p>

<pre><code>class RootViewController &lt; Nitron::ViewController
    on :random do
        randomText.text = @seed.sample
    end
end

class RootViewController
    def viewDidLoad
        super
        @seed = ["hoge", "fuga", "moge", "foo", "bar"]
    end 
end
</code></pre>

<p>先ほどoutletで指定したrandomが<code>on :random ブロック</code>という形でイベントを受けれます．</p>

<p>また，先ほどoutletでしていた<code>randomText</code>という名前でUITextFieldへのアクセスが可能になりますので，textにランダムで選んだ文字列を入れてみます．</p>

<h2>実行</h2>

<pre><code>$ rake
</code></pre>

<p>これで，シミュレータが立ち上がり，Buttonを押した時にランダムで文字が変わります．</p>

<h2>まとめ</h2>

<p>Nitronを使うことで，storyboardとRubyMotionとの連携が更に高まり開発効率が上がります．
特に軽いプロトタイプやモックなどはStoryboardでサッと作れるので，それに簡単にRubyMotionで動作を付けれれば素早い開発が可能なのではないでしょうか！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotionでUIViewを継承したViewを作る！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/25/inheritance/"/>
    <updated>2012-06-25T11:34:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/25/inheritance</id>
    <content type="html"><![CDATA[<p>アプリを作っていると独自UIViewを作りたいことが多々あります．</p>

<p>ObjCなら</p>

<pre><code>self = [super initWithFrame:frame];
if (self) {
    // 初期化処理
}
return self;
</code></pre>

<p>という感じのをinitWithFrameに書いて<code>//初期化処理</code>の部分にその独自クラスで持ってるものを初期化したりします．</p>

<p>RubyMotionに簡単に翻訳すると，</p>

<pre><code>class AwesomeView &lt; UIView
    def initWithFrame(frame)
        self = super.initWithFrame(frame)
        if self
            # 初期化処理
        end

        self
    end
end
</code></pre>

<p>と書きたいですが，これはダメダメでエラーになります．（selfを書き換えれないとか，initWithFrameがループして落ちるとか，，，）</p>

<p>RubyMotionでは</p>

<pre><code>class AwesomeView &lt; UIView
    def initWithFrame(frame)
        if super(frame)
            # 初期化処理
        end

        self
    end
end
</code></pre>

<p>とするのが正しそうです．
（おいおいそれイケてねーよっていう指摘があったら是非教えてください！！！）</p>

<p>あとは，AwesomeなViewを実装してくだけです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] NanoStoreを使ってデータを格納しよう！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/21/nanostore/"/>
    <updated>2012-06-21T09:28:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/21/nanostore</id>
    <content type="html"><![CDATA[<p>今日はRubyMotionでちょっとしたデータの保存がしたくなったときに使えるNanoStoreのWrapperを紹介します．</p>

<p><a href="https://github.com/siuying/NanoStoreInMotion">NanoStoreInMotion</a></p>

<p>NanoStoreというのは，sqliteを保存先としてスキーマレスなKeyValueStoreを実現するものらしいです．NanoStoreInMotionはそれをRubyMotionから使えるようにするWrapperです．</p>

<h2>インストール</h2>

<p>まずcocoapodsを入れます</p>

<pre><code>$ gem install motion-cocoapods
$ pod setup
</code></pre>

<p>NanoStoreInMotionを入れます．</p>

<pre><code>$ gem isntall nano-store
</code></pre>

<p>プロジェクトを作って，Rakefileを編集します．</p>

<pre><code>$ motion create nanostoretest
$ cat Rakefile
# -*- coding: utf-8 -*-
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'rubygems'
require 'motion-cocoapods'
require 'nano-store'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'nanotest'
  app.pods do
    dependency 'NanoStore', '~&gt; 2.1.4'
  end
end
</code></pre>

<h2>使ってみる</h2>

<h3>前処理</h3>

<p>まず，NanoStoreの保存先を決めてインスタンス化します．</p>

<pre><code>NanoStore.shared_store = NanoStore.store(:file, App.documents_path + '/store.db')
</code></pre>

<p><code>App.documents_path</code>というのは，BubbleWrapの便利Methodで，
<code>/Users/xxxxxx/Library/Application Support/iPhone Simulator/5.1/Applications/EDC08B50-2004-42D9-8B67-2E290EF55CFF/Documents</code>みたいなアプリ毎の保存場所を返してくれます．
中身の実装的には<code>NSSearchPathForDirectoriesInDomains</code>でNSDocumentDirectoryを返してるだけです．</p>

<pre><code>NanoStore.shared_store = NanoStore.store(:memory)
</code></pre>

<p>とすることで，ファイルに保存するのではなく，オンメモリでDbを使うこともできます．</p>

<h3>Model定義</h3>

<p>次に，保存するModelを定義します．</p>

<p>Modelを定義するには<code>NanoStore::Model</code>を継承したクラスを定義すれば良いです．</p>

<pre><code>class Label &lt; NanoStore::Model
  attribute :text
  attribute :x
  attribute :y
  attribute :height
  attribute :width
end
</code></pre>

<p>保存するフィールドは<code>attribute &lt;シンボル名&gt;</code>で定義できます．
上記の例では，text, x, y, height, width というフィールド（というかKey）が定義されます．</p>

<p>★ <code>attribute :key</code>は自動的に付与されるので，<code>:key</code>は書いてはいけません．（書いてもエラーにはならないが，実際に使うときに予期せぬ動作になります．なりました．）</p>

<p>NanoStore はNSDataも入れれるようですが，インデックスが効かないようです．</p>

<h3>データ投入</h3>

<p>先ほど定義したModelクラスのnewメソッドを呼んでsaveすれば良いです．</p>

<pre><code>label = Label.new(
    :text=&gt;"test",
    :x =&gt; 100,
    :y =&gt; 200,
    :height =&gt; 50,
    :width =&gt; 250)
label.save
</code></pre>

<p>この時点で保存されて，検索などが出来るようになります．</p>

<h3>検索</h3>

<p>検索も先ほど定義したModelクラスを通じて行います．</p>

<pre><code># もうひとつLabelを追加しておく
hogeLabel = Label.new(
    :text=&gt;"test1",
    :x =&gt; 50,
    :y =&gt; 400,
    :height =&gt; 100,
    :width =&gt; 50)
hogeLabel.save

allLabels = label.all
# =&gt; [#&lt;Label:0x8e622e0&gt;, #&lt;Label:0x8e62720&gt;]
</code></pre>

<p>条件を指定して検索は</p>

<pre><code>Label.find(:text=&gt;"test")
# =&gt; [#&lt;Label:0x8e622e0&gt;]
</code></pre>

<p>とすればできるので，あとは<code>.each</code>とかユニークなKeyで検索するなら<code>.first</code>
とかすれば目当てのものが手に入ります．</p>

<pre><code>Label.find(:x =&gt; { NSFGreaterThan =&gt; 10 }).each do |lbl|
    p lbl.text
end
# =&gt; "test1"
# =&gt; "test"
</code></pre>

<h3>アップデート</h3>

<p>更新処理は，上記の検索で得られたもののプロパティを編集して再度saveを呼べば良いです．</p>

<pre><code>update = Label.find(:text=&gt;"test").first
update.text = "test2"
update.save

Label.all.each do |lbl|
    p lbl.text
end
# =&gt; "test2"
# =&gt; "test1"
</code></pre>

<h3>削除</h3>

<p>削除処理は，同じく上記の検索で得られたものの<code>delete</code>を呼べば，削除できます．</p>

<pre><code>del = Label.find(:text=&gt;"test1").first
del.delete

Label.all.each do |lbl|
    p lbl.text
end
# =&gt; "test2"
</code></pre>

<p>全部削除したい場合は，</p>

<pre><code>Label.delete
</code></pre>

<p>とすれば，全部消えます．</p>

<pre><code>Label.delete(:text=&gt;"test1")
</code></pre>

<p>のように条件をつければ，条件にヒットしたものを一気に削除できます．</p>

<h2>保存されるデータ</h2>

<p>さて，実際に保存されているデータはどうなっているのでしょうか？</p>

<p><code>NanoStore.store</code>時に<code>:file</code>を指定した場合は指定したPathにsqliteのデータベースファイルが生成されています．
その中をsqlite3コマンドかなんかで見ていけば保存されている形を見ることができます．</p>

<pre><code>$ sqlite3 store.db
sqlite&gt; .tables
NSFKeys    NSFValues
</code></pre>

<p>どうやら<code>NSFKeys</code>と<code>NSFValues</code>というテーブルが存在するようです．</p>

<h3>NSFKeys</h3>

<pre><code>$sqlite&gt; select * from NSFkeys;
ROWID|NSFKey|NSFPlist|NSFCalendarDate|NSFObjectClass
</code></pre>

<ul>
<li>ROWIDはautonumber</li>
<li>NSFKeyはオブジェクトごとに異なるID</li>
<li>NSFPlistはオブジェクトのattributeと値をplist形式で表したもの</li>
<li>NSFCalendarDateは更新日かな？</li>
<li>NSFObjectClass はNanoStore::Modelを継承したクラス名</li>
</ul>


<h3>NSFValues</h3>

<pre><code>sqlite &gt; select * from NSFValues;
ROWID|NSFKey|NSFAttribute|NSFValue|NSFDatatype
</code></pre>

<ul>
<li>ROWIDはautonumber</li>
<li>NSFKeyはNSFKeysテーブルのNSFKey（外部キー）</li>
<li>NSAttributeはattributeで定義したシンボル名</li>
<li>NSFValueは実際に入っている値</li>
<li>NSFDatatypeは型．TEXTとかREALとか</li>
</ul>


<p>NSFValuesの方にModelクラスの違い関係なくattribute名と値が入っています．
クラス名とかの情報はNSFKeysの方に入っていますね．</p>

<h2>まとめ</h2>

<p>NanoStoreInMotionはデータを保存，検索，削除などが簡単なステップで出来て，ちょっとしたデータの取り扱いに役立つと思います．
<code>:memory</code>を使うことで，Web APIからデータをごっそり取ってきてさっとフィルタリングするような用途にも簡単に使えそうです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.13が早くもリリース]]></title>
    <link href="http://pchw.github.com/blog/2012/06/20/1-dot-13/"/>
    <updated>2012-06-20T00:52:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/20/1-dot-13</id>
    <content type="html"><![CDATA[<p>早くもRubyMotion 1.13が出てます．バグ修正が主です．</p>

<h2>更新内容</h2>

<pre><code>= RubyMotion 1.13 =

  * Fixed a regression in `rake simulator' introduced by the last update.
    Also, the environment variable used to set the SDK target is renamed to
    `target' (ex. rake target=4.3).
  * Fixed a bug in the build system where certain .rb files would be rebuilt
    every time `rake build' was executed, because the object directory was not
    touched.
  * Fixed a bug in the build system where the RUBYOPT variable would not be
    cleared when calling the gen_bridge_metadata tool, which would cause some
    issues later on. Patch by Satoshi Ebisawa.
</code></pre>

<h2>更新内容（訳）</h2>

<ul>
<li>前回のアップデートで書いてたrake simulatorのエンバグ修正．rake target=4.3みたいに指定するようになった．</li>
<li>オブジェクトディレクトリが更新されなかったからrake buildが実行された時に毎回.rbファイルをリビルドするようにビルドシステムを修正</li>
<li>RUBYOPT変数がgen_bridge_metadataを呼ぶときにクリアされない問題を修正．</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.12 出てますよ]]></title>
    <link href="http://pchw.github.com/blog/2012/06/19/rm1-dot-12/"/>
    <updated>2012-06-19T05:08:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/19/rm1-dot-12</id>
    <content type="html"><![CDATA[<p>昨日ぐらいにRubyMotion 1.12が出てます．
主にBugfixの模様．</p>

<h2>更新内容（原文）</h2>

<pre><code>= RubyMotion 1.12 =

  * Fixed a bug where sending an `init' message alone (without using `alloc'
    before) would lead to a memory crash. This was possible when overloading
    an initWith* method and doing `self.init' inside.
  * Fixed a bug where performing Objective-C methods that accept CFType objects
    would crash the program (ex. [ABPersonViewController setDisplayedPerson:]).
  * Switched to clang++ to link the executable bits. This fixes linker crashes
    on iOS 6.0.
  * Added `fast' output for `rake spec'. Fixed a bug in the other outputs.
    Patch by Marin Usalj.
  * Improved the build system to let the user specify CPU archs that should be
    used for a certain platform. The `app.archs' method returns a Hash that one
    can tweak. This is so far only useful when you target 4.3 (which is armv6
    and armv7) and want to link with a 3rd-party library that only supports
    armv7 (ex. app.archs['iPhoneOS'] = ['armv7']).
  * Improved `rake simulator' to honor the `deployment_target' environment
    variable (ex. rake deployment_target=4.3). Patch by Satoshi Ebisawa.
  * Fixed a bug in the build system where the compiler would not use the right
    BridgeSupport files when using a lower deployment_target.
    Patch by Satoshi Ebisawa.
  * Fixed the build system to re-link the .app executable in case one of the
    vendored libraries changed.
  * Fixed bugs in both ARM/simulator compilers where structures smaller than
    64-bit would not be following the ABI and causing unexpected behavior in
    certain cases (ex. cocos2d). Thanks to Aaron Hurley for the detective work.
  * Removed Kernel#select as it clashes with a private `select' method defined
    by iOS and triggered when hittin the select button in a paste action.
    Thanks to Francis Chong for the detective work.
</code></pre>

<h2>更新内容(訳)</h2>

<ul>
<li>alloc無しでinitを呼んだ時にメモリ破壊を引き起こすバグを修正．initWithなんとかをオーバーロードして，そのメソッド内でself.initを呼んでいた場合起こっていた模様．</li>
<li>CFTypeを受け取るObjCのメソッドを呼んだ時にクラッシュするバグを修正．ABPersonViewControllerのsetDisplayedPerson:とか．</li>
<li>clang++のexecutable bitを立てるようにした．これにより，iOS6.0でリンカがクラッシュを引き起こすのが修正される．</li>
<li>rake specの出力モードにfastが追加された．他の出力モードのバグも修正．</li>
<li>build systemが改善してapp.archsのハッシュをいじることでCPUアーキテクチャを指定できる様になった．（app.archs[&#8216;iPhoneOS&#8217;]=[&#8216;armv7&#8217;]とか）</li>
<li>rake simulatorするときにdeployment_target環境変数を評価するようになった．(rake deployment_target4.3 とかする)</li>
<li>deployment_targetを昔のにしてる時，BridgeSupportファイルが正しく使われなかった問題を修正</li>
<li>vendoreライブラリが１個でも変更されてたら再リンクするようにしたよ</li>
<li>ARM/simulator両方のコンパイラで64bitより小さい構造体がABIに反映されない問題を修正．これによってcocos2dなど期待しない動作をしていたのが修正された．</li>
<li>Kernel#selectを削除．pasteアクションの選択ボタンを押した時とかにクラッシュする問題が修正される．</li>
</ul>


<h2>その他</h2>

<p>deployment_target周りで問題が見つかっているらしい．</p>

<p>deployment_targetに5.0を指定して5.0SDKが無い時（SDKが5.1など）にrakeに失敗するらしい．</p>

<p>修正は次のリリースに入る模様．</p>

<p>待てない人は，
<a href="https://github.com/HipByte/RubyMotion/commit/01315ce30ce5e5e2f74618862a1172aca95b9cdf">https://github.com/HipByte/RubyMotion/commit/01315ce30ce5e5e2f74618862a1172aca95b9cdf</a>
をrevertすればいいらしい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotionを使ってる人はTestFlight使うの簡単だからやった方がいいよ]]></title>
    <link href="http://pchw.github.com/blog/2012/06/17/testflight/"/>
    <updated>2012-06-17T20:45:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/17/testflight</id>
    <content type="html"><![CDATA[<p>iOSアプリを開発していて，友達とかチームの人に配布する時のAdHoc配布はTestFlightが便利です．</p>

<p>XCodeでやってたときは，AdHoc用の構成を作ってEntitlementがどうとかしてオーガナイザでIPAファイルにしてTestFlightのサイトにアクセスしてUpload BuildでIPAをアップロードして配布するメンバーを選んで，，，というような事をしないといけませんでした．</p>

<p>※ 最近はTestFlight Desktop Appとか出てて何かもうちょっと楽になってそうな感じだけど．</p>

<p>RubyMotionでは<code>motion-testflight</code>というgemがありまして，そこらへんを楽チンに出来ます．</p>

<p><img src="http://pchw.github.com/images/testflight_devcenter.png" alt="developer center" /></p>

<p>公式の<a href="http://www.rubymotion.com/developer-center/articles/testflight/">Developer Center</a>にもガイドがあるので，みんなやってるかな？</p>

<p>まぁとりあえず導入とどう設定してるか解説してみるよ．</p>

<p><code>motion-testflight</code>を使うには4つ準備が必要です．</p>

<ol>
<li>motion-testflightのインストール</li>
<li>API TokenをRakefileに設定する</li>
<li>Team TokenをRakefileに設定する</li>
<li>TestFlight SDKをvendorに入れる</li>
</ol>


<h2>motion-testflightのインストール</h2>

<pre><code>$ sudo gem install motion-testflight
</code></pre>

<h2>API TokenをRakefileに設定する</h2>

<p>次に，TestFlightのWebページに行ってAPI Tokenを取得する必要があります．</p>

<p><img src="http://pchw.github.com/images/testflight_apitoken.png" alt="api token" /></p>

<p>TestFlightのWebページに行ってログインします．
その後，右上のをクリックしてアカウント設定を開きます．
その中の下の方にAPI Tokenが書いてあるのでコピーします．</p>

<p><code>Rakefile</code>の<code>app.testflight.api_token</code>に設定します．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
end
</code></pre>

<p>こんな感じになります．</p>

<h2>Team TokenをRakefileに設定する</h2>

<p>TestFlightにはチームとか言う配布する範囲的なものが決めれます．</p>

<p>※ チーム内でもdistribution_listという更に細かく配布先を設定することも出来ます．</p>

<p>そして，そのチームごとにTeam TokenというAPI Tokenとは別のものがあります．これも設定する必要があります．</p>

<p><img src="http://pchw.github.com/images/testflight_teamtoken.png" alt="TeamToken" /></p>

<p>TeamInfoからTeamTokenをコピペして<code>Rakefile</code>の<code>app.testflight.team_token</code>に設定します．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
end
</code></pre>

<p>こんな感じになります．</p>

<h2>TestFlight SDKをダウンロードする</h2>

<p><code>motion-testflight</code>はTestFlight SDKが無いと動きません．</p>

<p>そのため，さっきのTeamTokenをコピーした近くにTestFlight SDKへのリンクがあるのでそこから落としておきます．</p>

<p><a href="http://testflightapp.com/sdk/download">TestFlight SDK ダウンロード</a></p>

<p>TestFlight SDKはzipなので，解凍して<code>vendor/TestFlight</code>とかに置いておきます．</p>

<p>Rakefile にも置き場所を設定する必要があります．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
    app.testflight.sdk = 'vendor/TestFlight'
end
</code></pre>

<h2>TestFlightで配布する</h2>

<pre><code>$ rake testflight notes="リリースノートを入れる"
</code></pre>

<p>とすれば，buildしてTestFlightへアップロードされていきます．</p>

<h2>distribution_listを作った方がいい</h2>

<p>ここまでだと，AdHoc BuildされたパッケージがTestFlightに上がるのは楽になりましたが，
まだTestFlightのWebサイトにアクセスしてどのTeammateを配布先にするかを選択しないといけません．</p>

<p>これは非常にめんどくさいので，distribution_listを作ります．</p>

<p><img src="http://pchw.github.com/images/testflight_people.png" alt="people" /></p>

<p>メニューのPeopleの所を選びます．</p>

<p><img src="http://pchw.github.com/images/testflight_distribution.png" alt="distribution" /></p>

<p>distribution_listに入れたい人を選択して，右のActionsから<code>+New Distribution List</code>を選択します．
あとは，そのdistribution_listに名前を付けてSaveすれば完了です．</p>

<p>※ distribution_listは何個も作れるっぽいので，「アプリ毎」とか「このアプリのテスターはこの人達」とか「どうせ全員に配るから全員」など色んな単位で作っておくと色々指定出来て楽ちんです．</p>

<p>distribution_listを作ったら，<code>Rakefile</code>にdistribution_listを設定します．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
    app.testflight.sdk = 'vendor/TestFlight'
    app.testflight.distribution_lists = ['&lt;distribution_list&gt;']
end
</code></pre>

<p>こんな感じで設定します．Arrayで設定できるので，この集団とあの集団に配布したいという時も2つ設定すればいいだけです．</p>

<h2>証明書とProvisioningProfile</h2>

<p>証明書(codesign_certificate)とProvisioningProfileは何も設定しないと，
keychainの初めに見つかった証明書と<code>~/Library/MobileDevice/Provisioning</code>内にある初めの<code>.mobileprovision</code>を使ったりします．</p>

<p>割りとTestFlight配布だと上手くいかなくなることが多いので，<code>Rakefile</code> で指定するといいです．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
    app.testflight.sdk = 'vendor/TestFlight'
    app.testflight.distribution_lists = ['&lt;distribution_list&gt;']

    app.codesign_certificate = "iPhone Distribution: なまえがはいったり"
    app.provisioning_profile = "/Users/&lt;Username&gt;/Library/MobileDevice/Provisioning Profiles/XXXXXXXXXXXXXXXX.mobileprovision"
end
</code></pre>

<p>こんな感じに指定すると良いです．</p>

<p><code>app.provisioning_profile</code>は<code>~/...</code>とか入れるとエラーになるので，普通にフルパス入れるとよいです．</p>

<h2>まとめ</h2>

<p>motion-testflight を入れるとAdHoc配布がすごく楽になります．
今まではXCodeのオーガナイザとブラウザとエディタを行ったり来たりでしたが，
simulatorの起動等と同じようにターミナルで完結するのですごく楽．</p>

<p>他人へのAdHoc配布だけでなく，自分で複数のdeviceに入れるときもUSBを繋ぎ変えて<code>rake device</code>を連発するより楽だと思うので，積極的に使っていくと良いと思います．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.11が出て，iOS 6.0 beta1 でも使える様になった！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/13/1-dot-11/"/>
    <updated>2012-06-13T12:25:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/13/1-dot-11</id>
    <content type="html"><![CDATA[<p>RubyMotion が早くもiOS 6.0で使えるようになった模様．</p>

<pre><code>$ sudo motion update
</code></pre>

<p>しましょう！</p>

<p>更に，blockにnilを渡しても大丈夫になったので，何もしなくていいのにlambda{}的なことを書かないといけなかったのが楽になります！</p>

<h2>リリースノート</h2>

<pre><code>= RubyMotion 1.11 =

  * Fixed a bug where the runtime would not allow `nil' to be passed as a
    C-level block argument.
  * Fixed a bug where methods defined by attr_* would abort the program when
    called by Objective-C.
  * Improved `rake spec' to honor the `output' environment variable, which can
    be used to select a different output format. Available formats: spec_dox,
    test_unit, tap and knock (ex. rake spec output=test_unit).
  * Support for the iOS 6.0 Beta 1 SDK can be generated after having installed
    Xcode 4.5 by typing the following command:
    $ cd /Library/RubyMotion/data/6.0; rake update
</code></pre>

<h2>リリースノート訳</h2>

<ul>
<li>blockにnilが渡せなかったのを修正</li>
<li>attr_なんとかで定義したメソッドをObjCから呼んだら（どうやるの？）落ちる問題を修正した</li>
<li>rake specの出力フォーマットを選べる様になったよ</li>
<li>iOS 6.0 Beta 1 サポート</li>
</ul>


<h2>iOS 6.0 beta 1 を使う方法</h2>

<p>XCode4.5をダウンロードしてインストールします．</p>

<p>RubyMotion を 1.11 にアップデートしておきます．</p>

<p>その後，</p>

<pre><code>$ cd /Library/RubyMotion/data/6.0
$ gem install nokogiri
$ rake update
</code></pre>

<p>を行なえば，RubyMotionで使えるようになります！</p>

<p>Rakefileに</p>

<pre><code>app.xcode_dir = '/Applications/新XCodeの場所...'
</code></pre>

<p>とかすればいいらしいです．
（普通に入れてる人は別にRakefileに書かなくてもいいかな）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] Bundlerを使って楽をしてみた！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/06/bundler/"/>
    <updated>2012-06-06T08:53:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/06/bundler</id>
    <content type="html"><![CDATA[<p>昨日<a href="http://thunderboltlabs.com/posts/using-bundler-with-rubymotion">Using Bundler With Rubymotion</a>という記事が投稿されて，話題になっていたので早速ためしてみた．</p>

<p>記事の内容的には，色々<code>require</code>したり<code>gem install</code>したりするのめんどくさいよね！それ<code>bundle</code>使えばできるよ！てな感じでした．</p>

<h2>やってみよう！</h2>

<p>何はともあれ，bundlerを入れます．</p>

<pre><code>$ gem install bundler
</code></pre>

<p><code>Rakefile</code>の<code>require 'motion/project'</code>の下辺りに</p>

<pre><code>require 'bundler'
Bundler.require
</code></pre>

<p>を追加しておきます．</p>

<p>あとは，Gemfileを作成して</p>

<pre><code>$ cat &gt; Gemfile
source :rubygems

gem "rake"
gem "motion-testflight"
</code></pre>

<p>とかして保存しておきます．あとは，</p>

<pre><code>$ bundle install
</code></pre>

<p>と実行すれば，自動的にgemを入れてくれます．</p>

<pre><code>$ rake testflight
</code></pre>

<p>とか打てば，<code>Rakefile</code>に<code>require 'motion-testflight'</code> とか書かなくてもOKです！</p>

<h2>罠</h2>

<p>上記のは<code>motion-testflight</code>でやっているのは訳があって，
<code>motion-testflight</code>は実は<code>gem install</code>だけでは完結していなくて，
TestFlight SDKをダウンロードして<code>vendor/testflight</code>に入れないとダメなんですねー．残念です．</p>

<p>ここらへんどうすればいいんだろう，，，？僕はRuby畑の人ではないので，どうすればいいのかよく分からないです．Gemfileにダウンロードするスクリプトとか書けばいいの？（書けるの？）</p>

<h2>One more thing</h2>

<p>んで，そのbundleの記事に反応していた中で</p>

<blockquote class="twitter-tweet tw-align-left" width="350" lang="ja"><p>せっかく使うんだったら bundle install &#8211;path vendor/bundle とかにして、システムにgemを入れないようにした方がいいかも？</p>&mdash; Satoshi Ebisawaさん (@satococoa) <a href="https://twitter.com/satococoa/status/209836315833925635" data-datetime="2012-06-05T02:37:30+00:00">6月 5, 2012</a></blockquote>


<script src="http://pchw.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>という意見がありましたので，やってみました．</p>

<pre><code>$ bundle install --path vendor/bundle
</code></pre>

<p>とやると，<code>vendor/bundle</code>以下に<code>ruby/&lt;version&gt;/gems</code>やらなんやら色んなファイルが出来てました．</p>

<p>これでシステムグローバルに入れるのではなくて，そのProject内にgemsをインストールしているわけですね．</p>

<p>その後は，いつもどおり<code>rake</code>でいいのかな？と思ったのですが，</p>

<pre><code>$ rake
Could not find rake-0.9.2.2 in any of the sources
Run `bundle install` to install missing gems.
</code></pre>

<p>とかいう警告が出てました．
しかし，rake自体は成功している模様．よく分からない．</p>

<pre><code>$ bundle exec rake
</code></pre>

<p>とやる必要があるのかな？と思ったのですが，同じメッセージが出てました．
ここらへんはbundler詳しくないのでよく分からない，，，</p>

<p>何か分かったら教えて頂けるとありがたいです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] Simulatorでは動くのに実機で動かなくてハマった話]]></title>
    <link href="http://pchw.github.com/blog/2012/06/05/casesensitive/"/>
    <updated>2012-06-05T23:29:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/05/casesensitive</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>アプリを作ってた時に，Simulatorでは動くのに<code>rade device</code>や<code>rake testflight</code>して実機で動かしたときに起動した瞬間落ちるという現象が起こって困った話です．</p>

<h2>RubyMotionは実機でのデバッグに弱い！</h2>

<p>実機を繋ぐのはめんどくさいので，基本はSimulatorで開発してるのですが，さぁ実機でうごかすかーとなったときに何故か即死して困りました．</p>

<p>RubyMotionは<code>rake</code>したときにSimulatorが自動的に立ち上がってインタラクティブシェルで色々出来るという利点があるのですが，これは実機では出来ません．（よね？）</p>

<p>なので，どうしてもSimulatorがメインになってしまう気がします．</p>

<p>今回実機で動かして落ちるとかいうことでハマったわけですが，結果的には実機で動かしてXCodeのOrganizerのConsoleからログを見て原因調査をしました．
それ以外で実機オンリーのバグ調査はどうやるんでしょうか，，，XCodeだと実機で繋いでブレイクポイントとか貼れると思うのですが，RubyMotionだと方法がない，，，</p>

<h2>今回のケース</h2>

<p>さて，今回はどういう原因で落ちていたかです．</p>

<p>こういうSourceでした．</p>

<pre><code>class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    @window = UIWindow.alloc.initWithFrame UIScreen.mainScreen.bounds
    @storyboard = UIStoryboard.storyboardWithName(
        "StoryBoard", 
        bundle: nil)
    @window.rootViewController = @storyboard.instantiateViewControllerWithIdentifier "NavigationController"

    @window.makeKeyAndVisible
    true
  end
end
</code></pre>

<p>リソースは <code>Storyboard.storyboard</code>です．</p>

<pre><code>    @storyboard = UIStoryboard.storyboardWithName(
        "StoryBoard", 
        bundle: nil)
</code></pre>

<p>この部分で指定しているStoryboard名の大文字小文字が間違っているからですね．（正しくは<code>"Storyboard"</code>）
Simulatorでは何故か動くのですが，実機ではStoryboardが見つからないというログを吐いて落ちます．</p>

<h2>まとめ</h2>

<p>RubyMotionを使っていると，どうしてもSimulator頼りの開発になりがちですが，あまりに実機で確認しないと最終フェーズで痛いことになるっていう話でした！</p>

<p>TwitterをRubyMotion検索で張ってるのですが，Twitter上でもTypoで動かなくて困ったぜみたいな話とか見ましたし，実行時評価も色々と大変ですね．
MethodとかPropertyなら静的解析とかでなんとかなりそうですが，今回みたいに文字列部分に関するところだとどうしても発見出来ない気がする，，，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion のlib部分がソース公開してるのでPullRequestを送ってみたよ！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/02/pullreq/"/>
    <updated>2012-06-02T12:41:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/02/pullreq</id>
    <content type="html"><![CDATA[<p>RubyMotionのlib部分のソースが公開されてます．</p>

<p>lib部分にはbuildsystemやRakefileとかvendor周りのあれこれが含まれていて，
最近のfixがその辺りの修正が多かったので，広くpull requestを受け付けようということですかね．</p>

<p>早速前の記事(<a href="http://pchw.github.com/blog/2012/06/02/certificate/">[RubyMotion] 証明書の名前に日本語が入っていた時にrake device出来ない問題の解決策</a>)の解決策なんかは，<code>motion create</code>で生成されるRakefileの修正でいけるのでパパッとPull Requestを送って本家に組み込んでもらうのがいいです．</p>

<p>というわけで，Pull Requestを<a href="https://github.com/HipByte/RubyMotion/pull/1">送っておきました</a>．
なんと<code>pull/1</code>で1番目のpullらしい．</p>

<p>本家に組み込まれるまで，ローカル環境を同じように修正するには，
<code>/Library/RubyMotion/lib/motion/project/app.rb</code>を修正します．</p>

<p>修正内容は<a href="https://github.com/HipByte/RubyMotion/pull/1/files">Pull Requestの詳細</a>をみて分かると思いますけど，102行目に</p>

<pre><code># -*- coding: utf-8 -*-
</code></pre>

<p>を追加するだけです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] 証明書の名前に日本語が入っていた時にrake device出来ない問題の解決策]]></title>
    <link href="http://pchw.github.com/blog/2012/06/02/certificate/"/>
    <updated>2012-06-02T12:10:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/02/certificate</id>
    <content type="html"><![CDATA[<p>RubyMotionを色々いじって記事書いてたのですが，全然実機で試してませんでした．</p>

<p>BT周りの実装をしてて，ついにシミュレータで確認ができなくなったので，実機に転送しようとして<code>rake device</code>したら</p>

<pre><code>"iPhone Developper: &lt;your escaped name&gt; : no identity found
rake aborted!
Command failed with status (1): [CODESIGN_ALLOCATE="/Developer/Platforms/iP...]
</code></pre>

<p>とか出やがりました．</p>

<p>マルチバイト文字を何かエスケープして<code>\123\456</code>みたいな形式にしてくれて，codesignに渡してしまうので，codesign側がそんなidentifyがねえよと言ってるわけですね．</p>

<p><a href="http://www.rubymotion.com/developer-center/guides/project-management/#_configuration">RubyMotion Project Management Guide#2.Configuration</a>
によれば，</p>

<pre><code>codesign_certificate
The name of the certificate to use for codesigning, as a String. The default value is the first iPhone Developer certificate found in keychain. Example: "iPhone Developer: Darth Vader (A3LKZY369Q)".
</code></pre>

<p>とあるので，Rakefileに指定すればいいかなーとか思って</p>

<pre><code>$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'hoge'
  app.codesign_certificate = "iPhone Developer: &lt;your name&gt;" # added
end
</code></pre>

<p>こんな感じで，<code>app.codesign_certificate</code>を追加したらですね，</p>

<pre><code>rake aborted!
Rakefile:9: invalid multibyte char (US-ASCII)
Rakefile:9: invalid multibyte char (US-ASCII)
Rakefile:9: syntax error, unexpected $end, expecting keyword_end
</code></pre>

<p>こういうエラーが出て，もしかしてRakefileにマルチバイト文字は指定出来ないのか，，，ピンチ！</p>

<pre><code>$ file Rakefile
Rakefile: UTF-8 Unicode text
</code></pre>

<p>ちゃんとUTF8だよな，，，</p>

<h2>解決策</h2>

<p>と，まぁ色々悩んだんですが，結局解決策は</p>

<pre><code># -*- coding: utf-8 -*-
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'hoge'
  app.codesign_certificate = "iPhone Developer: &lt;your name&gt;"
end
</code></pre>

<p>これが正解です．</p>

<p><code># -*- coding: utf-8 -*-</code> を追加すればいいだけでした．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.9が出てた！早い！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/01/19/"/>
    <updated>2012-06-01T12:29:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/01/19</id>
    <content type="html"><![CDATA[<p>一昨日ぐらいに1.8が出たと思ったら，もう1.9が出てきました．</p>

<p>しかも変更点が多い．</p>

<p>次は2.0なのか1.10なのか気になりますね！</p>

<pre><code>= RubyMotion 1.9 =

  * Fixed a bug in the build system where the paths of vendored libraries
    would not be properly quoted and cause a build failure in case they
    contain space characters.
  * Fixed a bug in the build system where using a lower deployment_target
    version would cause a link error at runtime because the application was
    linking against a framework that does not exist (ex. CoreImage on 4.3).
  * Fixed the `rake spec' task to not move the simulator window to the
    foreground.
  * Fixed a bug in the compiler where APIs accepting pointers to
    CoreFoundation types could not be given Pointer objects of the :object
    type (ex. CFErrorRef*).
  * Added support for CoreAudio (experimental). At the very least, constants
    pointing to four-bytes characters should be properly covered.
  * Fixed a typo in "expected array of %d elements, got %d" exception message
    where the numbers were inverted. Thanks Enrico Thierbach.
  * Fixed a bug in the compiler where compiling strings containing only null
    characters (ex. "\x00") would cause a crash.
</code></pre>

<ul>
<li>vendorライブラリのpathがQuoteで囲まれてなくてスペースが含まれてたときにビルドが失敗するのを修正</li>
<li>CoreImageを4.3で使おうとするみたいなdevelopment_targetを昔のに設定してるのに存在しないフレームワークを指定したときにリンクエラーになるビルドの問題を修正</li>
<li><code>rake spec</code>した時にシミュレータが前に出てこないのを修正</li>
<li>CFなんちゃらへのポインタをAPIに渡せない問題の修正</li>
<li>CoreAudioのサポートを追加．</li>
<li>例外メッセージのtypo修正</li>
<li>nullキャラクターだけが含まれたstringをコンパイルする時にクラッシュしてた問題を修正</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion]Bubble-Wrapを使ってみた]]></title>
    <link href="http://pchw.github.com/blog/2012/05/31/bubblewrap/"/>
    <updated>2012-05-31T22:44:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/31/bubblewrap</id>
    <content type="html"><![CDATA[<p>今日はBubble-Wrapというライブラリを使ってみました．</p>

<p><a href="http://matt.aimonetti.net/BubbleWrap/">Bubble-Wrap</a></p>

<p>Bubble-Wrap はめんどくさいことを簡単にしてくれるヘルパーとかRubyっぽく書けない部分をよりRubyっぽくしてくれるライブラリです．</p>

<p>例えば，<a href="http://pchw.github.com/blog/2012/05/30/resource/">昨日書いた</a>リソースの読み込みの所で，</p>

<pre><code>path = NSBundle.mainBundle.resourcePath.stringByAppendingPathComponent "test.txt"
</code></pre>

<p>とか書きましたけど，<code>NSBundle.mainBundle.resoucePath</code>とかめんどくさいですよね．</p>

<p>それを，</p>

<pre><code>path = resources_path.stringByAppendingPathComponent "text.txt"
</code></pre>

<p>にしてくれたりします．
（他にも色々と<code>documents_path</code>とか<code>notification_center</code>とか）</p>

<pre><code>alert "Hoge"
</code></pre>

<p>とするだけで，</p>

<pre><code>alert = UIAlertView.alloc.initWithTitle "Hoge",
    message: nil,
    delegate: nil,
    cancelButtonTitle: 'OK',
    otherButtonTitles: nil
alert.show
</code></pre>

<p>とやってくれたりするのもあります．</p>

<p>色々ありますが，Wikiを見ても一部しか載っていないので，何が出来るか全部把握するには，<a href="https://github.com/mattetti/BubbleWrap/tree/master/lib/bubble-wrap">Githubでコード</a>を見るしか無いっぽいです．</p>

<p>他にも便利なものがあって，HTTPアクセスやJSONのラッパーも提供されています．
例えば，Twitter APIにアクセスして，取得したJSONのデータのアクセスは</p>

<pre><code>BubbleWrap::HTTP.get("https://api.twitter.com/1/users/show.json?screen_name=TwitterAPI&amp;include_entities=true") do |response|
    json = BubbleWrap::JSON.parse response.body.to_str
    p json['name']
end
</code></pre>

<p>のように書けます．
元が NSURLConnectionを作って，delegateで受けてみたいなことを書かないのと比べるととても簡単です．</p>

<p><code>response</code> も<code>body</code>だけでなく，<code>headers</code>や<code>status_code</code>とか<code>ok?</code>（200 OKかどうかを調べる）などもあります．</p>

<p>他にも，device情報を取ったり，gestureを簡単に扱ったりするものもあるので，有効に活用して素早くRubyMotionでアプリ作って行きましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotionでリソース読み込み]]></title>
    <link href="http://pchw.github.com/blog/2012/05/30/resource/"/>
    <updated>2012-05-30T23:37:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/30/resource</id>
    <content type="html"><![CDATA[<p>すごく初歩的なところだけども，RubyMotionで画像やテキストのリソースを<code>.app</code>の中にプリセット保持して使う方法です．</p>

<p>色々と試すときに画像やテキストを使いたい事が多くて，備忘録的に書いておきます．</p>

<p>まず，<code>.app</code>内にリソースを保持するには，<code>/resources</code>に入れておけばOKです．</p>

<p>あとは読み出しですが，画像の場合はすごく簡単で，</p>

<pre><code>UIImage.imageNamed "hoge.png"
</code></pre>

<p>とかすれば，<code>/resources/hoge.png</code> が読み出されます．</p>

<p>テキストとかHTMLファイルとかは，</p>

<pre><code>path = NSBundle.mainBundle.resourcePath.stringByAppendingPathComponent "test.txt"
str = NSString.stringWithContentsOfFile path
</code></pre>

<p>とかすれば<code>NSString</code>で取得できます．</p>

<p><code>NSBundle.mainBundle.resourcePath</code>で<code>/resources</code>に当たる場所のPathが取得できるので，あとは好きにすればOKということですね．</p>

<p>簡単なサンプルを書いといたので，置いときます．</p>

<p><a href="https://github.com/pchw/rm-resource-sample">画像とテキストを読みだしてUILabelとUIImageViewに貼り付けるサンプル</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.8 リリースされてますね]]></title>
    <link href="http://pchw.github.com/blog/2012/05/30/18/"/>
    <updated>2012-05-30T20:52:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/30/18</id>
    <content type="html"><![CDATA[<p>リリース周期はやい！もう1.8が出てます．</p>

<pre><code>$ sudo motion update 
</code></pre>

<p>しましょう！今回は修正が少なめです．</p>

<pre><code>= RubyMotion 1.8 =

  * Fixed a bug in the generation of BridgeSupport files for multiple headers
    directories.
  * When building vendored projects, unset environment variables that could
    potentially make the build to fail.
    https://github.com/HipByte/motion-cocoapods/issues/12
</code></pre>

<ul>
<li>複数のヘッダディレクトリを指定したときのBridgeSupportファイル生成のとこのバグ修正</li>
<li>ベンダープロジェクトをビルドするときに環境変数CCが設定されてない時にビルド失敗する問題の修正．</li>
</ul>


<p>いつも誰かがRubyMotionの新しいバージョン出たって言ってるの見てアップデートしてるのが分かるんだけど，言ってる人はどうやって新しいバージョンが出たって知るんだろう？毎日<code>motion update</code>とかしてるのかな．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[レビュー] DotTouchというiPhone/iPadアプリを使ってみたよ！]]></title>
    <link href="http://pchw.github.com/blog/2012/05/29/dottouch/"/>
    <updated>2012-05-29T21:44:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/29/dottouch</id>
    <content type="html"><![CDATA[<p>今日はDotTouchというドット絵を描くiPhoneアプリの紹介です．</p>

<div class="sticky-itslink" style="margin-bottom:1em;"><a href="http://itunes.apple.com/jp/app/dottouch/id333614008?mt=8&uo=4" rel="nofollow" target="_blank"><img src="http://a3.mzstatic.com/us/r1000/110/Purple/v4/84/9b/d8/849bd8e5-ba16-f769-9efa-28b23bdc56a9/mza_2802615915717116417.100x100-75.png" style="border-style:none;float:left;margin-right:5px;" alt="DotTouch" title="DotTouch" /></a><div class="sticky-itslinktext" style="float:left;"><a href="http://itunes.apple.com/jp/app/dottouch/id333614008?mt=8&uo=4" rel="nofollow" target="_blank">DotTouch</a><br />STUDIO SHIN<br />ジャンル： ユーティリティ - エンターテインメント<br />リリース日： 2009-10-15<br />価格： 350円<br /> <a href="http://itunes.apple.com/jp/app/dottouch/id333614008?mt=8&uo=4" rel="nofollow" target="_blank"><img src="http://ax.phobos.apple.com.edgesuite.net/ja_jp/images/web/linkmaker/badge_appstore-sm.gif" alt ="iTunesで見る" style="border-style:none;" /></a><br /><span style="font-size:xx-small;">posted with <a href="http://sticky.linclip.com/rank/" target="_blank">sticky</a> on 2012.5.29</span></div><br style="clear:left;" /></div>


<p></p>

<!-- more -->


<p>TLを見ていたら，ちょうどレビューを書いてくれる人にプロモコードプレゼントという@studioshinさんのTweetが見えたので，すぐにレビュー書きます！って言ってプロモコードをもらったのです．</p>

<p>すぐにレビューを書くつもりだったのに，ずるずると遅くなってしまった．</p>

<p><img src="http://pchw.github.com/images/dottouch_springboard.png" alt="icon" /></p>

<p>このアイコンがDotTouchです．</p>

<p>起動するとこんな感じの画面になります．</p>

<p><img src="http://pchw.github.com/images/dottouch_start.png" alt="start" /></p>

<h2>描画ツール</h2>

<p><img src="http://pchw.github.com/images/dottouch_tool.png" alt="draw" /></p>

<p>ここの部分が描画系のツールです．</p>

<p>左から</p>

<ul>
<li>ドットを打つペンツール</li>
<li>ドットに囲まれた領域を塗るバケツツール</li>
<li>直線を引くツール</li>
<li>塗りつぶし四角を描くツール</li>
<li>塗りつぶさない四角を描くツール</li>
<li>塗りつぶし丸を描くツール</li>
<li>塗りつぶさない丸を描くツール</li>
<li>範囲選択ツール</li>
</ul>


<p>です．</p>

<p>範囲選択ツールだけは選択すると下のパレットの部分が変化します．</p>

<p><img src="http://pchw.github.com/images/dottouch_select.png" alt="select" /></p>

<p>範囲選択ツールを選択した後のツールに関してはちょっと分かりにくいですね．</p>

<p>左から</p>

<ul>
<li>範囲の部分を左右反転したものを描画</li>
<li>範囲選択の部分を上下反転したものを描画</li>
<li>範囲選択の部分を90度回転したものを描画</li>
<li>範囲選択の部分を-90度回転したものを描画</li>
<li>範囲の色を削除</li>
</ul>


<p>の機能のようです．</p>

<p>左右反転とかは顔とかを描くのに半分だけ打って選択して反転描画させればできるので便利ですね．</p>

<p><img src="http://pchw.github.com/images/dottouch_paletmenu.png" alt="pallet" /></p>

<p>その下の部分はパレットで，分かりにくいですがスクロールが出来るようになってます．</p>

<p>右のところはキャンバスを縮小したものが表示されていて，拡大しているときはそこをグリグリすると動かせます．
ちょっと動きが急で難しいです．</p>

<h2>メニュー</h2>

<p><img src="http://pchw.github.com/images/dottouch_menu.png" alt="menu" /></p>

<p>一番下のところはメニュー画面になってます．</p>

<p>左から</p>

<ul>
<li>ファイルの新規作成や保存や書き出し・共有のメニュー</li>
<li>Undo</li>
<li>Redo</li>
<li>アニメーションを作るためのメニュー</li>
<li>カラーパレット設定</li>
<li>レイヤー設定</li>
<li>グリッドの表示非表示</li>
<li>縮小</li>
<li>拡大</li>
</ul>


<p>となっています．</p>

<h3>ファイルメニュー</h3>

<p>新規ファイルとか保存とか出来ます．</p>

<p>新規ファイルを作る際にはキャンバスのドット数(16x16とか320x320とか)や色のビット数（8bitとか32bitとか）を選べます．</p>

<p>うちみたいなヘタレなドット絵しか打てない人は16x16の32bitとか選べばそれっぽいドット絵でお茶を濁せます．</p>

<p>書き出しや共有は色んな方法が提供されていて，WiFiで送りつけるとかも出来るっぽいですね．高機能ですね．</p>

<h3>アニメーションを作るためのメニュー</h3>

<p>ここがたぶんこのアプリのすごい所で，ドット絵のアニメGifが作れます．</p>

<p>ただ，ここのUIがちょっと分かりにくい，，，</p>

<p>＋でイメージを追加して，フレームを選んでそれぞれ何秒のところに割り当てるという感じで使います．
再生ボタンを押すとループ再生されます！</p>

<p>うちはアニメGifを描くだけの気力はなかった！</p>

<h3>カラーパレットの設定</h3>

<p><img src="http://pchw.github.com/images/dottouch_palet.png" alt="palet" /></p>

<p>さっきまでは2行ぐらいしか表示されてなかったカラーパレットが全画面で表示されます．
2行だとかなり狭かったですけど，全画面だと選びやすいですね．</p>

<p>下にボタンがついてますけど，</p>

<ul>
<li>色の選択</li>
<li>初めに選択された色を次に選択した色にコピー</li>
<li>初めに選択された色を次に選択した色と入れ替える</li>
<li>謎</li>
</ul>


<p>ていう感じです．</p>

<p>パレットも保存できるっぽいです．</p>

<h2>まとめ</h2>

<p>かなり機能が豊富で，本格ドッターには嬉しそうな機能が盛りだくさんです．</p>

<p>キャンバスも広く取れるし，色数も32bitまで選べますし，アニメーションすら作れてしまいます．</p>

<p>ただし，その分アイコンが分かりにくかったり簡単なドットを打つのが難しかったりするので，初心者には厳しいのかもしれません．</p>

<div class="sticky-itslink" style="margin-bottom:1em;"><a href="http://itunes.apple.com/jp/app/dottouch/id333614008?mt=8&uo=4" rel="nofollow" target="_blank"><img src="http://a3.mzstatic.com/us/r1000/110/Purple/v4/84/9b/d8/849bd8e5-ba16-f769-9efa-28b23bdc56a9/mza_2802615915717116417.100x100-75.png" style="border-style:none;float:left;margin-right:5px;" alt="DotTouch" title="DotTouch" /></a><div class="sticky-itslinktext" style="float:left;"><a href="http://itunes.apple.com/jp/app/dottouch/id333614008?mt=8&uo=4" rel="nofollow" target="_blank">DotTouch</a><br />STUDIO SHIN<br />ジャンル： ユーティリティ - エンターテインメント<br />リリース日： 2009-10-15<br />価格： 350円<br /> <a href="http://itunes.apple.com/jp/app/dottouch/id333614008?mt=8&uo=4" rel="nofollow" target="_blank"><img src="http://ax.phobos.apple.com.edgesuite.net/ja_jp/images/web/linkmaker/badge_appstore-sm.gif" alt ="iTunesで見る" style="border-style:none;" /></a><br /><span style="font-size:xx-small;">posted with <a href="http://sticky.linclip.com/rank/" target="_blank">sticky</a> on 2012.5.29</span></div><br style="clear:left;" /></div>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.7出てます]]></title>
    <link href="http://pchw.github.com/blog/2012/05/29/17/"/>
    <updated>2012-05-29T08:14:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/29/17</id>
    <content type="html"><![CDATA[<p>RubyMotion 1.7が出てました．</p>

<pre><code>$ sudo motion update
</code></pre>

<p>しましょう！</p>

<p>ところで，RubyMotion がアップデートされたかどうかを素早く知る方法ってないんですかね．</p>

<pre><code>= RubyMotion 1.7 =

  * Fixed a bug in the compiler where the proper signature would not be used
    when defining informal protocol methods with CF types as arguments.
  * Fixed iOS constants to be looked up at demand (when being used) and not
    when the app starts, because certain constants are not set until a certain
    API is called (ex: the kAB... constants of the AddressBook framework).
    This change should also speed up a little bit the app starting time.
  * Fixed a bug in the compiler where very long selectors would be truncated
    and causing exceptions later at runtime.
  * Fixed a bug in the compiler where memory-related selectors (alloc, dealloc,
    retain, release, etc.) could not be defined in Ruby.
  * Fixed a bug in the compiler where NSObject instance methods could not be
    called on classes (ex. MyClass.performSelector(...)).
  * Fixed a bug in the build system where vendored 3rd-party APIs dealing with
    types defined in iOS headers could not be used (ex: enums or structs).
</code></pre>

<ul>
<li>非公式プロトコルでCFタイプを引数にとった時に正しいシグネチャを吐かないことの修正</li>
<li>アプリ開始時のiOS定数発見の部分を修正．この影響でアプリ開始時間がちょっと早くなる．</li>
<li>超長いセレクタが途中で切れて実行時エラーになる問題の修正</li>
<li>メモリ関係（allocとかreleaseとか）がRubyで定義出来なかったのを修正．</li>
<li>NSObjectのインスタンスメソッドをクラスから呼べなかった問題を修正</li>
<li>外部ベンダのライブラリを読み込むやつでiOSヘッダに定義されたenumとかstructsが使われなかった問題を修正</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion]Routableを使ってみた]]></title>
    <link href="http://pchw.github.com/blog/2012/05/28/routable/"/>
    <updated>2012-05-28T12:32:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/28/routable</id>
    <content type="html"><![CDATA[<p>Routableというgemがあるみたいという話を聞いて，使ってみました．</p>

<p><a href="https://github.com/clayallsopp/Routable">Routable - GitHub</a></p>

<h2>インストール</h2>

<pre><code>gem install routable
</code></pre>

<h2>Rakefileの編集</h2>

<pre><code>$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'routable'
</code></pre>

<p>のように<code>require 'routable'</code>を追加します．</p>

<h2>使い方</h2>

<pre><code>class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    @window = UIWindow.alloc.initWithFrame UIScreen.mainScreen.applicationFrame
    @window.makeKeyAndVisible

    @rootView = NSBundle.mainBundle.loadNibNamed(
        'RootViewController',
        owner: self,
        options: nil).first

    @router = Routable::Router.router
    @router.navigation_controller = UINavigationController.alloc.init
    @router.navigation_controller.pushViewController(@rootView, animated: false)
    @rootView.title = "TOP"

    @router.map("one", OneViewController)
    @router.map("two/:param", TwoViewController)

    @window.rootViewController = @router.navigation_controller

    @one = @rootView.view.viewWithTag 1
    @one.addTarget(
        self, 
        action: 'onClickOne:', 
        forControlEvents: UIControlEventTouchUpInside)

    @two = @rootView.view.viewWithTag 2
    @two.addTarget(
        self, 
        action: 'onClickTwo:', 
        forControlEvents: UIControlEventTouchUpInside)

    true
  end

  def onClickOne(sender)
    @router.open('one', true)
  end

  def onClickTwo(sender)
    @router.open('two/100', true)
  end
end
</code></pre>

<p>こんな感じで使います．</p>

<p><code>Routable::Router.router</code>を取得して，<code>navigation_controller</code>に<code>UINavigationController</code>を設定しておきます．</p>

<p><code>map(&lt;URL&gt;, &lt;viewController&gt;)</code>のようにすると，そのURL文字列をキーにviewControllerの遷移を書けるようになります．</p>

<p><URL>には<code>hoge/:id</code>のようにパラメータを記述することができて，この場合だと<code>hoge/1</code>とかいう遷移をさせれば，宛先のviewControllerに<code>1</code>というパラメータが渡されます．</p>

<p>遷移する時は<code>open(&lt;URL&gt;, &lt;animation?&gt;)</code>とすれば設定したviewControllerへ遷移出来ます．</p>

<h2>遷移先ViewController</h2>

<pre><code>class TwoViewController &lt; UIViewController
    attr_accessor :param

    def initWithParams(params = {})
        init()
        self.param = params[:param]
        self
    end

    def viewDidLoad
        @label = UILabel.alloc.init
        @label.bounds = [[50, 150],[300, 50]]
        @label.text = "TwoViewController" + self.param.to_s
    end
end
</code></pre>

<p>のようにして，<code>initWithParams</code>で引数を受け取れます．</p>

<h2>問題点</h2>

<p>ViewControllerをコードで場所設定とかすごくめんどくさいので，僕はIBを使います．</p>

<p>しかし，IBを使って<code>resouces/HogeViewController.xib</code>を作って，Controlを配置して，，，というフローを辿ってやると，<code>router.open</code>の時にエラーが出ます．</p>

<p>routerの内部では，<code>HogeViewController.alloc.initWithParams()</code>を呼んでインスタンス化しているわけですが，
xibを使うと，<code>NSBundle.mainBundle.loadNibNamed</code>をしないとダメっぽいんですね．</p>

<p>なので，routerをいじって，mapするときにそれ用の情報を入れてあげるかしないといけません．</p>

<h2>まとめ</h2>

<p>僕はStoryboardを使うと思います．</p>

<p>XCodeが嫌でRubyMotionをやっている人は多いと思うので，コードでControlを配置するのが苦じゃない人にとってはrouterはいいソリューションなんじゃないでしょうか．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion]motion-liveを使ってみよう]]></title>
    <link href="http://pchw.github.com/blog/2012/05/27/live/"/>
    <updated>2012-05-27T11:17:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/27/live</id>
    <content type="html"><![CDATA[<p>RubyMotionは<code>rake</code>でBuildしてSimulatorが立ち上がります．</p>

<p>その後，Terminalはインタラクティブシェルになっていて，そこで行った操作がそのままSimulatorの方に反映されます．</p>

<p>ところが，そのインタラクティブシェルは1行しか打てなくて，そこで色々やろうとすると苦しいものがあります．</p>

<p>そこで登場するのが<strong>motion-live</strong>です．</p>

<p><a href="https://github.com/irrationalfab/motion-live">motion-live</a></p>

<p>これを導入すると，<code>LiveScratchpad.rb</code>というファイルを編集してセーブしたタイミングでインタラクティブシェルに引き渡されて実行されます．</p>

<h2>使い方</h2>

<p>まず，motion-liveをインストールします．</p>

<pre><code>$ gem install motion-live
Fetching: colored-1.2.gem (100%)
Fetching: rb-fsevent-0.9.1.gem (100%)
Fetching: motion-live-0.1.gem (100%)
Successfully installed colored-1.2
Successfully installed rb-fsevent-0.9.1
Successfully installed motion-live-0.1
3 gems installed
Installing ri documentation for colored-1.2...
Installing ri documentation for rb-fsevent-0.9.1...
Installing ri documentation for motion-live-0.1...
Installing RDoc documentation for colored-1.2...
Installing RDoc documentation for rb-fsevent-0.9.1...
Installing RDoc documentation for motion-live-0.1...
</code></pre>

<p>その後，プロジェクトのRakefileを編集します．
（既存の<code>motion crate</code>したのがないなら，<code>motion create &lt;hoge&gt;</code>しましょう）</p>

<pre><code>$ more Rakefile
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'motion-live'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'hoge'
end
</code></pre>

<p>変更点は<code>require 'motion-live'</code>を追加しただけです．</p>

<p>あとは，実行します．</p>

<pre><code>$ rake live
</code></pre>

<p>するとSimulatorが立ち上がり，ディレクトリに<code>LiveScratchpad.rb</code>が出来上がるので，編集保存するとインタラクティブシェルで実行されます．</p>

<h2>利点</h2>

<p>motion-liveを使った時の利点です．</p>

<h3>複数行のコードをインタラクティブシェルに読ませれる</h3>

<p>これによって，何回も使う処理をclassとかmethodにして使うとかいうのも簡単にかけます．</p>

<h3>自分の好きなエディタが使える</h3>

<p>インタラクティブシェルではTerminalの上で書くので，補完も効かなければ，キーバインディングも違って色々不便です．</p>

<p>しかし，motion-liveを使うと，<code>LiveScratchpad.rb</code>というファイルを編集出来ればいいのです．</p>

<p>つまり，EmacsやVimも使えますし，補完を効かせれるTextMateやRedcarを使うことも出来ます．
<a href="http://pchw.github.com/blog/2012/05/27/st2/">前の記事</a>で書いたようにSublime Text2も補完を効かせれるようになったので，僕はSublime Text2を使ってます．</p>

<pre><code>app = UIApplication.sharedApplication
delegate = app.delegate
repl(delegate)
@window
</code></pre>

<p>みたいなのを書く時でも，すごい楽なわけです．</p>

<p>セットアップも有効にするのもRakefileに1行追加ですし，簡単で積極的に使って行きたいですね！</p>
]]></content>
  </entry>
  
</feed>
