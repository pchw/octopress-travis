<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyMotion | ぽっちぽちにしてやんよ]]></title>
  <link href="http://pchw.github.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://pchw.github.com/"/>
  <updated>2012-08-06T09:02:06+09:00</updated>
  <id>http://pchw.github.com/</id>
  <author>
    <name><![CDATA[pchw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] motion-fontawesomeっていうgems作りました]]></title>
    <link href="http://pchw.github.com/blog/2012/08/06/fontawesome/"/>
    <updated>2012-08-06T01:09:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/08/06/fontawesome</id>
    <content type="html"><![CDATA[<p>1ヶ月ぶりの記事になってしまった！お久しぶりです．</p>

<p>motion-fontawesomeというgemsを作ったので宣伝がてらエントリー書きます！</p>

<h2>Retina環境の増加</h2>

<p>Retina iPhone/iPadはかなり普及したんじゃないでしょうか？
ちょっと何か作るのにTabBarやToolbarのアイコンをいちいち探すのが面倒で，GlyphiconsのFREEを使っていたりしたんですが，非Retinaで荒いし他のアイコンを探そうとすると種類が少なかったり，Retinaじゃなかったりで面倒くさいことこの上ないです．
（そもそも無料で探してるのが悪かったりするんですけど）</p>

<p>そこで<a href="http://fortawesome.github.com/Font-Awesome/">FontAwesome</a>というWebfontを使うと便利です．</p>

<h2>FontAwesomeとは</h2>

<p>元々はTwitter Bootstrapで使えるようにデザインされたアイコンフォント集です．</p>

<p>フォントなので拡大縮小しても荒くならないため，Retinaでも例え超Retina的なのが出てきても対応できますし，色んなサイズが必要になる場面でも力を発揮してくれます．</p>

<h2>FontAwesomeをRubyMotionで使おうとすると</h2>

<p>しかし，普通に使おうとすると，色々とやることがあって，
- <code>resources</code>にフォントを追加
- <code>app.fonts</code>に追加
- 欲しい記号を出すためのUTF8の文字コードを調べないといけない
- chr(Encoding::UTF_8)とか使って文字コードから文字へ変換してやらないといけない
みたいなことをやらないといけないわけです．</p>

<h2>motion-fontawesomeを作りました</h2>

<p>そんな面倒なことやってられないので，上記のことを簡単にしてくれるgemsを作りました．</p>

<p>使い方は，</p>

<h3>Rakefileでrequire</h3>

<pre><code>require 'rubygems'
require 'motion-fontawesome'
</code></pre>

<h3>使う</h3>

<pre><code>label = UILabel.alloc.initWithFrame([[0, 0],[200, 200]])
label.text = FontAwesome.icon(key)
label.font = FontAwesome.fontWithSize(200.0)
</code></pre>

<h3>アイコンが出る！</h3>

<p><img src="/images/fontawesome.png" alt="simulator" /></p>

<p>これだけです！上のスクリーンショットを見てもらってもわかると思いますけど，こんなに大きくしても綺麗です．</p>

<p><code>FontAwesome.icon()</code>に指定する文字列は<a href="http://fortawesome.github.com/Font-Awesome/#all-icons">ここ</a>から選んで，<code>icon-</code>を取ったものを指定してください．</p>

<p>（<code>icon-camera</code>だったら<code>camera</code>だけで良いです．）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.15のすげえアップデート]]></title>
    <link href="http://pchw.github.com/blog/2012/07/06/1-dot-15/"/>
    <updated>2012-07-06T10:23:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/07/06/1-dot-15</id>
    <content type="html"><![CDATA[<p>RubyMotion 1.15ですごいアップデートが来るよってlrzさんが言ってました．</p>

<blockquote class="twitter-tweet" lang="ja"><p>Integrating a super cool new feature in RubyMotion. Will ship next week.</p>&mdash; Laurent Sansonettiさん (@lrz) <a href="https://twitter.com/lrz/status/218664619009519617" data-datetime="2012-06-29T11:18:02+00:00">6月 29, 2012</a></blockquote>


<script src="http://pchw.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>それが今日来たのですが，スーパークールなニューフィーチャーはTestFrameworkに関するものでした．</p>

<p>今までRubyMotionはbaconを使ったTestFrameworkが使われていて，
<code>rake spec</code>とするとSimulatorが実行されメソッドを呼んで値を検証してという形でした．</p>

<p>今回のアップデートでは，指でタップしたりDeviceイベント（画面を回転させたり）といったこともテストで出来るようになりました．</p>

<p>ObjC + XcodeだとjsでUIAutomationのテストを行うらしいんですが（やったことない），その機能がRubyMotionのbaconに統合された感じです．</p>

<pre><code>describe "The Timer view controller" do
  tests TimerController

  it "start a timer" do
    tap 'Start'
    controller.timer.isValid.should == true
  end
end
</code></pre>

<p>とすれば，<code>Start</code>というLabelのついてるButtonをタップしてcontrollerのtimerを検証してます．</p>

<p>実際にVideoを見てもらうのが早いと思います．Viewがガンガン動いて面白いです．</p>

<iframe src="http://player.vimeo.com/video/45193144" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>公式Blogの情報は<a href="http://blog.rubymotion.com/post/26489000626/functional-view-and-controller-testing-with-rubymotion">こちら</a></p>

<p>ドキュメントは<a href="http://www.rubymotion.com/developer-center/articles/testing/#_views_and_controllers_testing">こちら</a></p>

<p>7/22(日)に行われる<a href="http://connpass.com/event/665/">第一回RubyMotion勉強会</a>での発表ネタは今回のアップデートのテストに関することにしようと思います．
あと５人ぐらい空きがあるようですね．</p>

<p>修正： 第一回RubyMotion勉強会は <strong> 7/22（日）</strong> でした．</p>

<p>他のアップデートは↓のような感じです．</p>

<h2>更新履歴（訳）</h2>

<ul>
<li>UIAutomationの機能を使えるTestが書けるようになったし，jsじゃなくてpure Rubyで書ける．</li>
<li>spec/helpersの中のファイルが<code>rake spec</code>で使われるようになったよ</li>
<li><code>rake spec</code>にfileオプションが追加されて，テストする対象が選べるようになったよ．</li>
<li><code>RUBYMOTION_ENV</code>で実行時にtestなのかdevelopmentなのかreleaseなのかを判別出来る様になった．</li>
<li>rake staticが追加されてuniversal statc libraryを作れるようになった．</li>
<li>weak frameworkのサポート(app.weak_freameworks &lt;&lt; 'Twitter'とかする)</li>
<li>symlinkのファイルがresourceディレクトリに入っていた場合にコピーされてたのを修正．</li>
</ul>


<h2>更新履歴（原文）</h2>

<pre><code>= RubyMotion 1.15 =

  * Improved the spec framework to leverage UIAutomation's functionality. This
    lets you write functional tests on views and controllers by using the same
    event generators, but in pure Ruby (and not Javascript).
    Check http://www.rubymotion.com/developer-center/articles/testing for more
    information about the new API. Feature contributed by Eloy Duran.
  * Introduced spec helpers. `rake spec' will now honor the files inside the
    `spec/helpers' directory (if it exists) and compile them before the spec
    files.
  * Introduced the `files' option to `rake spec', which can be used to filter
    the spec files that should be run. Filters can be either the basename of
    a spec file or its full path, and are separated by a comma.
    Example: rake spec files=main_spec,kvo_spec,spec/foo_spec.rb 
  * Introduced the RUBYMOTION_ENV constant in the runtime which can have one of
    the following string values: 'test', 'development' and 'release'.
  * Introduced the `rake static' task which creates a universal static library
    containing the project's object files and the RubyMotion runtime, which is
    suitable for inclusion in Objective-C/Xcode projects. 
  * Introduced weak frameworks support. The `app.weak_frameworks' setting can
    be set to an array of framework names, similar to how `app.frameworks'
    works (ex. app.weak_frameworks += ['Twitter']). Patch by Satoshi Ebisawa.
  * Fixed a bug in the build system where  files within symlinks inside of the
    resources directory would not be copied. Patch by Nick Quaranto.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] Nitronを使ってOutletやActionっぽいことできるよ]]></title>
    <link href="http://pchw.github.com/blog/2012/06/26/nitron/"/>
    <updated>2012-06-26T00:10:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/26/nitron</id>
    <content type="html"><![CDATA[<p>前に<a href="http://pchw.github.com/blog/2012/05/22/storyboard/">Storyboardを使ってRubyMotionで開発する方法</a>とか<a href="http://pchw.github.com/blog/2012/05/22/ib/">[RubyMotion] InterfaceBuilderと合わせて使って楽をしよう</a>いう記事を書いたのですが，IdentifierとかTagを使ったりでちょっと面倒くさかったり，コントロールが増えてくるとTag番号がどのコントロールかわからなくなったりで煩雑でした．</p>

<p>そこで，Nitronというライブラリを使って普通のXcode+ObjCで言うIBOutletとかIBAction的なことを簡単にやりましょうという記事です．</p>

<p><a href="https://github.com/mattgreen/nitron">Nitron</a></p>

<p>公式のgithub内のWikiに<a href="https://github.com/mattgreen/nitron/wiki/Tutorial">チュートリアル</a>がありますが，ModelやNitronのViewControllerとかの説明やCoreData周りなどにも言及していてOutlet的なところだけやりたい人にはちょっと大掛かりです．</p>

<p>そのため，今回は本当にOutletやAction周りだけを使いたい人向けのシンプルコースです．</p>

<h2>Nitroのインストール</h2>

<pre><code>$ gem install nitron
</code></pre>

<p>なにはともあれgemインストール．</p>

<h2>プロジェクトの作成</h2>

<pre><code>$ motion create simplenitro
</code></pre>

<h2>app_delegate.rb の削除</h2>

<p>Nitronはapp_delegateに書いてあるようなのがライブラリ内部で勝手にやってくれます．
app_delegate.rbがあると，そちらが優先されてしまい，何も画面に出なくてハマるのでサクッと削除しておきます．</p>

<pre><code>$ rm app/app_delegate.rb
</code></pre>

<h2>Rakefile</h2>

<pre><code>$ cat Rakefile
# -*- coding: utf-8 -*-
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'rubygems'
require 'nitron'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'simplenitro'
end
</code></pre>

<p><code>require 'rubygems'</code>と<code>require 'nitron'</code>を追加するだけですね．
公式だと，Bundlerを使う方法が紹介されてます．</p>

<h2>storyboardの追加</h2>

<p>公式では，普通にXcodeのプロジェクトを作ってますが，要らないファイルが死ぬほど付いてくるので，単にXcodeを立ちあげてstoryboardファイルだけ追加しましょう．</p>

<p><code>File&gt;New&gt;File</code>で<code>iOS&gt;User Interface&gt;Storyboard</code>を選べばよいです．</p>

<p><img src="/images/nitron_storyboard.png" alt="new Storyboard" /></p>

<p>名前は<code>MainStoryboard.storyboard</code>にして，<code>./resources</code>に作成します．</p>

<h2>UINavigationControllerとUIViewControllerの追加</h2>

<p>こうやって作ったStoryboardには何も置かれていないので，<code>UINavigationController</code>を置きます．</p>

<p><img src="/images/nitron_navigation.png" alt="navigation" /></p>

<p>不要な<code>UITableViewController</code>がくっついて来るので<code>delete</code>ボタンで消します．</p>

<p><code>UIViewController</code>をD&amp;Dして置きます．</p>

<p><code>UINavigationController</code>を選択してUtility View（右側のペイン）の一番右のタブを選んで<code>RelationShip</code>の所から引っ張って，追加した<code>UIViewController</code>に繋ぎます．</p>

<p><img src="/images/nitron_rvc.png" alt="root view controller" /></p>

<p><code>UIViewController</code>を選択して，Utility Viewの左から３番目のタブを選んで，Classを<code>RootViewController</code>とかにしておきます．</p>

<h2>UITextFieldとUIButtonの追加</h2>

<p>そのままでは何もないので，入力欄とボタンを追加します．</p>

<p><img src="/images/nitron_control.png" alt="control" /></p>

<p>UITextFieldを選択して，Utility Viewの左から３番目のタブを選んで，
<code>User Defined Runtime Attributes</code>のところの + を選択して</p>

<ul>
<li>KeyPath: outlet</li>
<li>Type: String</li>
<li>Value: randomText</li>
</ul>


<p>とします．</p>

<p><img src="/images/nitron_outlet.png" alt="outlet" /></p>

<p>同様にUIButtonの方も</p>

<ul>
<li>KeyPath: outlet</li>
<li>Type: String</li>
<li>Value: random</li>
</ul>


<p>としておきます．</p>

<p>この時点でstoryboardの操作は終わりなので保存して閉じます．</p>

<h2>RootViewControllerの追加</h2>

<p><code>root_view_controller.rb</code>を追加して，RootViewControllerクラスを作成します．</p>

<pre><code>class RootViewController &lt; Nitron::ViewController
    on :random do
        randomText.text = @seed.sample
    end
end

class RootViewController
    def viewDidLoad
        super
        @seed = ["hoge", "fuga", "moge", "foo", "bar"]
    end 
end
</code></pre>

<p>先ほどoutletで指定したrandomが<code>on :random ブロック</code>という形でイベントを受けれます．</p>

<p>また，先ほどoutletでしていた<code>randomText</code>という名前でUITextFieldへのアクセスが可能になりますので，textにランダムで選んだ文字列を入れてみます．</p>

<h2>実行</h2>

<pre><code>$ rake
</code></pre>

<p>これで，シミュレータが立ち上がり，Buttonを押した時にランダムで文字が変わります．</p>

<h2>まとめ</h2>

<p>Nitronを使うことで，storyboardとRubyMotionとの連携が更に高まり開発効率が上がります．
特に軽いプロトタイプやモックなどはStoryboardでサッと作れるので，それに簡単にRubyMotionで動作を付けれれば素早い開発が可能なのではないでしょうか！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotionでUIViewを継承したViewを作る！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/25/inheritance/"/>
    <updated>2012-06-25T11:34:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/25/inheritance</id>
    <content type="html"><![CDATA[<p>アプリを作っていると独自UIViewを作りたいことが多々あります．</p>

<p>ObjCなら</p>

<pre><code>self = [super initWithFrame:frame];
if (self) {
    // 初期化処理
}
return self;
</code></pre>

<p>という感じのをinitWithFrameに書いて<code>//初期化処理</code>の部分にその独自クラスで持ってるものを初期化したりします．</p>

<p>RubyMotionに簡単に翻訳すると，</p>

<pre><code>class AwesomeView &lt; UIView
    def initWithFrame(frame)
        self = super.initWithFrame(frame)
        if self
            # 初期化処理
        end

        self
    end
end
</code></pre>

<p>と書きたいですが，これはダメダメでエラーになります．（selfを書き換えれないとか，initWithFrameがループして落ちるとか，，，）</p>

<p>RubyMotionでは</p>

<pre><code>class AwesomeView &lt; UIView
    def initWithFrame(frame)
        if super(frame)
            # 初期化処理
        end

        self
    end
end
</code></pre>

<p>とするのが正しそうです．
（おいおいそれイケてねーよっていう指摘があったら是非教えてください！！！）</p>

<p>あとは，AwesomeなViewを実装してくだけです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] NanoStoreを使ってデータを格納しよう！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/21/nanostore/"/>
    <updated>2012-06-21T09:28:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/21/nanostore</id>
    <content type="html"><![CDATA[<p>今日はRubyMotionでちょっとしたデータの保存がしたくなったときに使えるNanoStoreのWrapperを紹介します．</p>

<p><a href="https://github.com/siuying/NanoStoreInMotion">NanoStoreInMotion</a></p>

<p>NanoStoreというのは，sqliteを保存先としてスキーマレスなKeyValueStoreを実現するものらしいです．NanoStoreInMotionはそれをRubyMotionから使えるようにするWrapperです．</p>

<h2>インストール</h2>

<p>まずcocoapodsを入れます</p>

<pre><code>$ gem install motion-cocoapods
$ pod setup
</code></pre>

<p>NanoStoreInMotionを入れます．</p>

<pre><code>$ gem isntall nano-store
</code></pre>

<p>プロジェクトを作って，Rakefileを編集します．</p>

<pre><code>$ motion create nanostoretest
$ cat Rakefile
# -*- coding: utf-8 -*-
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'rubygems'
require 'motion-cocoapods'
require 'nano-store'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'nanotest'
  app.pods do
    dependency 'NanoStore', '~&gt; 2.1.4'
  end
end
</code></pre>

<h2>使ってみる</h2>

<h3>前処理</h3>

<p>まず，NanoStoreの保存先を決めてインスタンス化します．</p>

<pre><code>NanoStore.shared_store = NanoStore.store(:file, App.documents_path + '/store.db')
</code></pre>

<p><code>App.documents_path</code>というのは，BubbleWrapの便利Methodで，
<code>/Users/xxxxxx/Library/Application Support/iPhone Simulator/5.1/Applications/EDC08B50-2004-42D9-8B67-2E290EF55CFF/Documents</code>みたいなアプリ毎の保存場所を返してくれます．
中身の実装的には<code>NSSearchPathForDirectoriesInDomains</code>でNSDocumentDirectoryを返してるだけです．</p>

<pre><code>NanoStore.shared_store = NanoStore.store(:memory)
</code></pre>

<p>とすることで，ファイルに保存するのではなく，オンメモリでDbを使うこともできます．</p>

<h3>Model定義</h3>

<p>次に，保存するModelを定義します．</p>

<p>Modelを定義するには<code>NanoStore::Model</code>を継承したクラスを定義すれば良いです．</p>

<pre><code>class Label &lt; NanoStore::Model
  attribute :text
  attribute :x
  attribute :y
  attribute :height
  attribute :width
end
</code></pre>

<p>保存するフィールドは<code>attribute &lt;シンボル名&gt;</code>で定義できます．
上記の例では，text, x, y, height, width というフィールド（というかKey）が定義されます．</p>

<p>★ <code>attribute :key</code>は自動的に付与されるので，<code>:key</code>は書いてはいけません．（書いてもエラーにはならないが，実際に使うときに予期せぬ動作になります．なりました．）</p>

<p>NanoStore はNSDataも入れれるようですが，インデックスが効かないようです．</p>

<h3>データ投入</h3>

<p>先ほど定義したModelクラスのnewメソッドを呼んでsaveすれば良いです．</p>

<pre><code>label = Label.new(
    :text=&gt;"test",
    :x =&gt; 100,
    :y =&gt; 200,
    :height =&gt; 50,
    :width =&gt; 250)
label.save
</code></pre>

<p>この時点で保存されて，検索などが出来るようになります．</p>

<h3>検索</h3>

<p>検索も先ほど定義したModelクラスを通じて行います．</p>

<pre><code># もうひとつLabelを追加しておく
hogeLabel = Label.new(
    :text=&gt;"test1",
    :x =&gt; 50,
    :y =&gt; 400,
    :height =&gt; 100,
    :width =&gt; 50)
hogeLabel.save

allLabels = label.all
# =&gt; [#&lt;Label:0x8e622e0&gt;, #&lt;Label:0x8e62720&gt;]
</code></pre>

<p>条件を指定して検索は</p>

<pre><code>Label.find(:text=&gt;"test")
# =&gt; [#&lt;Label:0x8e622e0&gt;]
</code></pre>

<p>とすればできるので，あとは<code>.each</code>とかユニークなKeyで検索するなら<code>.first</code>
とかすれば目当てのものが手に入ります．</p>

<pre><code>Label.find(:x =&gt; { NSFGreaterThan =&gt; 10 }).each do |lbl|
    p lbl.text
end
# =&gt; "test1"
# =&gt; "test"
</code></pre>

<h3>アップデート</h3>

<p>更新処理は，上記の検索で得られたもののプロパティを編集して再度saveを呼べば良いです．</p>

<pre><code>update = Label.find(:text=&gt;"test").first
update.text = "test2"
update.save

Label.all.each do |lbl|
    p lbl.text
end
# =&gt; "test2"
# =&gt; "test1"
</code></pre>

<h3>削除</h3>

<p>削除処理は，同じく上記の検索で得られたものの<code>delete</code>を呼べば，削除できます．</p>

<pre><code>del = Label.find(:text=&gt;"test1").first
del.delete

Label.all.each do |lbl|
    p lbl.text
end
# =&gt; "test2"
</code></pre>

<p>全部削除したい場合は，</p>

<pre><code>Label.delete
</code></pre>

<p>とすれば，全部消えます．</p>

<pre><code>Label.delete(:text=&gt;"test1")
</code></pre>

<p>のように条件をつければ，条件にヒットしたものを一気に削除できます．</p>

<h2>保存されるデータ</h2>

<p>さて，実際に保存されているデータはどうなっているのでしょうか？</p>

<p><code>NanoStore.store</code>時に<code>:file</code>を指定した場合は指定したPathにsqliteのデータベースファイルが生成されています．
その中をsqlite3コマンドかなんかで見ていけば保存されている形を見ることができます．</p>

<pre><code>$ sqlite3 store.db
sqlite&gt; .tables
NSFKeys    NSFValues
</code></pre>

<p>どうやら<code>NSFKeys</code>と<code>NSFValues</code>というテーブルが存在するようです．</p>

<h3>NSFKeys</h3>

<pre><code>$sqlite&gt; select * from NSFkeys;
ROWID|NSFKey|NSFPlist|NSFCalendarDate|NSFObjectClass
</code></pre>

<ul>
<li>ROWIDはautonumber</li>
<li>NSFKeyはオブジェクトごとに異なるID</li>
<li>NSFPlistはオブジェクトのattributeと値をplist形式で表したもの</li>
<li>NSFCalendarDateは更新日かな？</li>
<li>NSFObjectClass はNanoStore::Modelを継承したクラス名</li>
</ul>


<h3>NSFValues</h3>

<pre><code>sqlite &gt; select * from NSFValues;
ROWID|NSFKey|NSFAttribute|NSFValue|NSFDatatype
</code></pre>

<ul>
<li>ROWIDはautonumber</li>
<li>NSFKeyはNSFKeysテーブルのNSFKey（外部キー）</li>
<li>NSAttributeはattributeで定義したシンボル名</li>
<li>NSFValueは実際に入っている値</li>
<li>NSFDatatypeは型．TEXTとかREALとか</li>
</ul>


<p>NSFValuesの方にModelクラスの違い関係なくattribute名と値が入っています．
クラス名とかの情報はNSFKeysの方に入っていますね．</p>

<h2>まとめ</h2>

<p>NanoStoreInMotionはデータを保存，検索，削除などが簡単なステップで出来て，ちょっとしたデータの取り扱いに役立つと思います．
<code>:memory</code>を使うことで，Web APIからデータをごっそり取ってきてさっとフィルタリングするような用途にも簡単に使えそうです．</p>
]]></content>
  </entry>
  
</feed>
