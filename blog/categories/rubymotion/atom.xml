<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyMotion | ぽっちぽちにしてやんよ]]></title>
  <link href="http://pchw.github.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://pchw.github.com/"/>
  <updated>2012-06-20T01:08:02+09:00</updated>
  <id>http://pchw.github.com/</id>
  <author>
    <name><![CDATA[pchw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.13が早くもリリース]]></title>
    <link href="http://pchw.github.com/blog/2012/06/20/1-dot-13/"/>
    <updated>2012-06-20T00:52:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/20/1-dot-13</id>
    <content type="html"><![CDATA[<p>早くもRubyMotion 1.13が出てます．バグ修正が主です．</p>

<h2>更新内容</h2>

<pre><code>= RubyMotion 1.13 =

  * Fixed a regression in `rake simulator' introduced by the last update.
    Also, the environment variable used to set the SDK target is renamed to
    `target' (ex. rake target=4.3).
  * Fixed a bug in the build system where certain .rb files would be rebuilt
    every time `rake build' was executed, because the object directory was not
    touched.
  * Fixed a bug in the build system where the RUBYOPT variable would not be
    cleared when calling the gen_bridge_metadata tool, which would cause some
    issues later on. Patch by Satoshi Ebisawa.
</code></pre>

<h2>更新内容（訳）</h2>

<ul>
<li>前回のアップデートで書いてたrake simulatorのエンバグ修正．rake target=4.3みたいに指定するようになった．</li>
<li>オブジェクトディレクトリが更新されなかったからrake buildが実行された時に毎回.rbファイルをリビルドするようにビルドシステムを修正</li>
<li>RUBYOPT変数がgen_bridge_metadataを呼ぶときにクリアされない問題を修正．</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.12 出てますよ]]></title>
    <link href="http://pchw.github.com/blog/2012/06/19/rm1-dot-12/"/>
    <updated>2012-06-19T05:08:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/19/rm1-dot-12</id>
    <content type="html"><![CDATA[<p>昨日ぐらいにRubyMotion 1.12が出てます．
主にBugfixの模様．</p>

<h2>更新内容（原文）</h2>

<pre><code>= RubyMotion 1.12 =

  * Fixed a bug where sending an `init' message alone (without using `alloc'
    before) would lead to a memory crash. This was possible when overloading
    an initWith* method and doing `self.init' inside.
  * Fixed a bug where performing Objective-C methods that accept CFType objects
    would crash the program (ex. [ABPersonViewController setDisplayedPerson:]).
  * Switched to clang++ to link the executable bits. This fixes linker crashes
    on iOS 6.0.
  * Added `fast' output for `rake spec'. Fixed a bug in the other outputs.
    Patch by Marin Usalj.
  * Improved the build system to let the user specify CPU archs that should be
    used for a certain platform. The `app.archs' method returns a Hash that one
    can tweak. This is so far only useful when you target 4.3 (which is armv6
    and armv7) and want to link with a 3rd-party library that only supports
    armv7 (ex. app.archs['iPhoneOS'] = ['armv7']).
  * Improved `rake simulator' to honor the `deployment_target' environment
    variable (ex. rake deployment_target=4.3). Patch by Satoshi Ebisawa.
  * Fixed a bug in the build system where the compiler would not use the right
    BridgeSupport files when using a lower deployment_target.
    Patch by Satoshi Ebisawa.
  * Fixed the build system to re-link the .app executable in case one of the
    vendored libraries changed.
  * Fixed bugs in both ARM/simulator compilers where structures smaller than
    64-bit would not be following the ABI and causing unexpected behavior in
    certain cases (ex. cocos2d). Thanks to Aaron Hurley for the detective work.
  * Removed Kernel#select as it clashes with a private `select' method defined
    by iOS and triggered when hittin the select button in a paste action.
    Thanks to Francis Chong for the detective work.
</code></pre>

<h2>更新内容(訳)</h2>

<ul>
<li>alloc無しでinitを呼んだ時にメモリ破壊を引き起こすバグを修正．initWithなんとかをオーバーロードして，そのメソッド内でself.initを呼んでいた場合起こっていた模様．</li>
<li>CFTypeを受け取るObjCのメソッドを呼んだ時にクラッシュするバグを修正．ABPersonViewControllerのsetDisplayedPerson:とか．</li>
<li>clang++のexecutable bitを立てるようにした．これにより，iOS6.0でリンカがクラッシュを引き起こすのが修正される．</li>
<li>rake specの出力モードにfastが追加された．他の出力モードのバグも修正．</li>
<li>build systemが改善してapp.archsのハッシュをいじることでCPUアーキテクチャを指定できる様になった．（app.archs['iPhoneOS']=['armv7']とか）</li>
<li>rake simulatorするときにdeployment_target環境変数を評価するようになった．(rake deployment_target4.3 とかする)</li>
<li>deployment_targetを昔のにしてる時，BridgeSupportファイルが正しく使われなかった問題を修正</li>
<li>vendoreライブラリが１個でも変更されてたら再リンクするようにしたよ</li>
<li>ARM/simulator両方のコンパイラで64bitより小さい構造体がABIに反映されない問題を修正．これによってcocos2dなど期待しない動作をしていたのが修正された．</li>
<li>Kernel#selectを削除．pasteアクションの選択ボタンを押した時とかにクラッシュする問題が修正される．</li>
</ul>


<h2>その他</h2>

<p>deployment_target周りで問題が見つかっているらしい．</p>

<p>deployment_targetに5.0を指定して5.0SDKが無い時（SDKが5.1など）にrakeに失敗するらしい．</p>

<p>修正は次のリリースに入る模様．</p>

<p>待てない人は，
<a href="https://github.com/HipByte/RubyMotion/commit/01315ce30ce5e5e2f74618862a1172aca95b9cdf">https://github.com/HipByte/RubyMotion/commit/01315ce30ce5e5e2f74618862a1172aca95b9cdf</a>
をrevertすればいいらしい．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotionを使ってる人はTestFlight使うの簡単だからやった方がいいよ]]></title>
    <link href="http://pchw.github.com/blog/2012/06/17/testflight/"/>
    <updated>2012-06-17T20:45:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/17/testflight</id>
    <content type="html"><![CDATA[<p>iOSアプリを開発していて，友達とかチームの人に配布する時のAdHoc配布はTestFlightが便利です．</p>

<p>XCodeでやってたときは，AdHoc用の構成を作ってEntitlementがどうとかしてオーガナイザでIPAファイルにしてTestFlightのサイトにアクセスしてUpload BuildでIPAをアップロードして配布するメンバーを選んで，，，というような事をしないといけませんでした．</p>

<p>※ 最近はTestFlight Desktop Appとか出てて何かもうちょっと楽になってそうな感じだけど．</p>

<p>RubyMotionでは<code>motion-testflight</code>というgemがありまして，そこらへんを楽チンに出来ます．</p>

<p><img src="/images/testflight_devcenter.png" alt="developer center" /></p>

<p>公式の<a href="http://www.rubymotion.com/developer-center/articles/testflight/">Developer Center</a>にもガイドがあるので，みんなやってるかな？</p>

<p>まぁとりあえず導入とどう設定してるか解説してみるよ．</p>

<p><code>motion-testflight</code>を使うには4つ準備が必要です．</p>

<ol>
<li>motion-testflightのインストール</li>
<li>API TokenをRakefileに設定する</li>
<li>Team TokenをRakefileに設定する</li>
<li>TestFlight SDKをvendorに入れる</li>
</ol>


<h2>motion-testflightのインストール</h2>

<pre><code>$ sudo gem install motion-testflight
</code></pre>

<h2>API TokenをRakefileに設定する</h2>

<p>次に，TestFlightのWebページに行ってAPI Tokenを取得する必要があります．</p>

<p><img src="/images/testflight_apitoken.png" alt="api token" /></p>

<p>TestFlightのWebページに行ってログインします．
その後，右上のをクリックしてアカウント設定を開きます．
その中の下の方にAPI Tokenが書いてあるのでコピーします．</p>

<p><code>Rakefile</code>の<code>app.testflight.api_token</code>に設定します．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
end
</code></pre>

<p>こんな感じになります．</p>

<h2>Team TokenをRakefileに設定する</h2>

<p>TestFlightにはチームとか言う配布する範囲的なものが決めれます．</p>

<p>※ チーム内でもdistribution_listという更に細かく配布先を設定することも出来ます．</p>

<p>そして，そのチームごとにTeam TokenというAPI Tokenとは別のものがあります．これも設定する必要があります．</p>

<p><img src="/images/testflight_teamtoken.png" alt="TeamToken" /></p>

<p>TeamInfoからTeamTokenをコピペして<code>Rakefile</code>の<code>app.testflight.team_token</code>に設定します．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
end
</code></pre>

<p>こんな感じになります．</p>

<h2>TestFlight SDKをダウンロードする</h2>

<p><code>motion-testflight</code>はTestFlight SDKが無いと動きません．</p>

<p>そのため，さっきのTeamTokenをコピーした近くにTestFlight SDKへのリンクがあるのでそこから落としておきます．</p>

<p><a href="http://testflightapp.com/sdk/download">TestFlight SDK ダウンロード</a></p>

<p>TestFlight SDKはzipなので，解凍して<code>vendor/TestFlight</code>とかに置いておきます．</p>

<p>Rakefile にも置き場所を設定する必要があります．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
    app.testflight.sdk = 'vendor/TestFlight'
end
</code></pre>

<h2>TestFlightで配布する</h2>

<pre><code>$ rake testflight notes="リリースノートを入れる"
</code></pre>

<p>とすれば，buildしてTestFlightへアップロードされていきます．</p>

<h2>distribution_listを作った方がいい</h2>

<p>ここまでだと，AdHoc BuildされたパッケージがTestFlightに上がるのは楽になりましたが，
まだTestFlightのWebサイトにアクセスしてどのTeammateを配布先にするかを選択しないといけません．</p>

<p>これは非常にめんどくさいので，distribution_listを作ります．</p>

<p><img src="/images/testflight_people.png" alt="people" /></p>

<p>メニューのPeopleの所を選びます．</p>

<p><img src="/images/testflight_distribution.png" alt="distribution" /></p>

<p>distribution_listに入れたい人を選択して，右のActionsから<code>+New Distribution List</code>を選択します．
あとは，そのdistribution_listに名前を付けてSaveすれば完了です．</p>

<p>※ distribution_listは何個も作れるっぽいので，「アプリ毎」とか「このアプリのテスターはこの人達」とか「どうせ全員に配るから全員」など色んな単位で作っておくと色々指定出来て楽ちんです．</p>

<p>distribution_listを作ったら，<code>Rakefile</code>にdistribution_listを設定します．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
    app.testflight.sdk = 'vendor/TestFlight'
    app.testflight.distribution_lists = ['&lt;distribution_list&gt;']
end
</code></pre>

<p>こんな感じで設定します．Arrayで設定できるので，この集団とあの集団に配布したいという時も2つ設定すればいいだけです．</p>

<h2>証明書とProvisioningProfile</h2>

<p>証明書(codesign_certificate)とProvisioningProfileは何も設定しないと，
keychainの初めに見つかった証明書と<code>~/Library/MobileDevice/Provisioning</code>内にある初めの<code>.mobileprovision</code>を使ったりします．</p>

<p>割りとTestFlight配布だと上手くいかなくなることが多いので，<code>Rakefile</code> で指定するといいです．</p>

<pre><code>Motion::Project::App.setup do |app|
    # Use `rake config' to see complete project settings.
    app.name = 'stickey'
    app.testflight.api_token = '&lt;API Token&gt;'
    app.testflight.team_token = '&lt;Team Token&gt;'
    app.testflight.sdk = 'vendor/TestFlight'
    app.testflight.distribution_lists = ['&lt;distribution_list&gt;']

    app.codesign_certificate = "iPhone Distribution: なまえがはいったり"
    app.provisioning_profile = "/Users/&lt;Username&gt;/Library/MobileDevice/Provisioning Profiles/XXXXXXXXXXXXXXXX.mobileprovision"
end
</code></pre>

<p>こんな感じに指定すると良いです．</p>

<p><code>app.provisioning_profile</code>は<code>~/...</code>とか入れるとエラーになるので，普通にフルパス入れるとよいです．</p>

<h2>まとめ</h2>

<p>motion-testflight を入れるとAdHoc配布がすごく楽になります．
今まではXCodeのオーガナイザとブラウザとエディタを行ったり来たりでしたが，
simulatorの起動等と同じようにターミナルで完結するのですごく楽．</p>

<p>他人へのAdHoc配布だけでなく，自分で複数のdeviceに入れるときもUSBを繋ぎ変えて<code>rake device</code>を連発するより楽だと思うので，積極的に使っていくと良いと思います．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.11が出て，iOS 6.0 beta1 でも使える様になった！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/13/1-dot-11/"/>
    <updated>2012-06-13T12:25:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/13/1-dot-11</id>
    <content type="html"><![CDATA[<p>RubyMotion が早くもiOS 6.0で使えるようになった模様．</p>

<pre><code>$ sudo motion update
</code></pre>

<p>しましょう！</p>

<p>更に，blockにnilを渡しても大丈夫になったので，何もしなくていいのにlambda{}的なことを書かないといけなかったのが楽になります！</p>

<h2>リリースノート</h2>

<pre><code>= RubyMotion 1.11 =

  * Fixed a bug where the runtime would not allow `nil' to be passed as a
    C-level block argument.
  * Fixed a bug where methods defined by attr_* would abort the program when
    called by Objective-C.
  * Improved `rake spec' to honor the `output' environment variable, which can
    be used to select a different output format. Available formats: spec_dox,
    test_unit, tap and knock (ex. rake spec output=test_unit).
  * Support for the iOS 6.0 Beta 1 SDK can be generated after having installed
    Xcode 4.5 by typing the following command:
    $ cd /Library/RubyMotion/data/6.0; rake update
</code></pre>

<h2>リリースノート訳</h2>

<ul>
<li>blockにnilが渡せなかったのを修正</li>
<li>attr_なんとかで定義したメソッドをObjCから呼んだら（どうやるの？）落ちる問題を修正した</li>
<li>rake specの出力フォーマットを選べる様になったよ</li>
<li>iOS 6.0 Beta 1 サポート</li>
</ul>


<h2>iOS 6.0 beta 1 を使う方法</h2>

<p>XCode4.5をダウンロードしてインストールします．</p>

<p>RubyMotion を 1.11 にアップデートしておきます．</p>

<p>その後，</p>

<pre><code>$ cd /Library/RubyMotion/data/6.0
$ gem install nokogiri
$ rake update
</code></pre>

<p>を行なえば，RubyMotionで使えるようになります！</p>

<p>Rakefileに</p>

<pre><code>app.xcode_dir = '/Applications/新XCodeの場所...'
</code></pre>

<p>とかすればいいらしいです．
（普通に入れてる人は別にRakefileに書かなくてもいいかな）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion] Bundlerを使って楽をしてみた！]]></title>
    <link href="http://pchw.github.com/blog/2012/06/06/bundler/"/>
    <updated>2012-06-06T08:53:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/06/06/bundler</id>
    <content type="html"><![CDATA[<p>昨日<a href="http://thunderboltlabs.com/posts/using-bundler-with-rubymotion">Using Bundler With Rubymotion</a>という記事が投稿されて，話題になっていたので早速ためしてみた．</p>

<p>記事の内容的には，色々<code>require</code>したり<code>gem install</code>したりするのめんどくさいよね！それ<code>bundle</code>使えばできるよ！てな感じでした．</p>

<h2>やってみよう！</h2>

<p>何はともあれ，bundlerを入れます．</p>

<pre><code>$ gem install bundler
</code></pre>

<p><code>Rakefile</code>の<code>require 'motion/project'</code>の下辺りに</p>

<pre><code>require 'bundler'
Bundler.require
</code></pre>

<p>を追加しておきます．</p>

<p>あとは，Gemfileを作成して</p>

<pre><code>$ cat &gt; Gemfile
source :rubygems

gem "rake"
gem "motion-testflight"
</code></pre>

<p>とかして保存しておきます．あとは，</p>

<pre><code>$ bundle install
</code></pre>

<p>と実行すれば，自動的にgemを入れてくれます．</p>

<pre><code>$ rake testflight
</code></pre>

<p>とか打てば，<code>Rakefile</code>に<code>require 'motion-testflight'</code> とか書かなくてもOKです！</p>

<h2>罠</h2>

<p>上記のは<code>motion-testflight</code>でやっているのは訳があって，
<code>motion-testflight</code>は実は<code>gem install</code>だけでは完結していなくて，
TestFlight SDKをダウンロードして<code>vendor/testflight</code>に入れないとダメなんですねー．残念です．</p>

<p>ここらへんどうすればいいんだろう，，，？僕はRuby畑の人ではないので，どうすればいいのかよく分からないです．Gemfileにダウンロードするスクリプトとか書けばいいの？（書けるの？）</p>

<h2>One more thing</h2>

<p>んで，そのbundleの記事に反応していた中で</p>

<blockquote class="twitter-tweet tw-align-left" width="350" lang="ja"><p>せっかく使うんだったら bundle install --path vendor/bundle とかにして、システムにgemを入れないようにした方がいいかも？</p>&mdash; Satoshi Ebisawaさん (@satococoa) <a href="https://twitter.com/satococoa/status/209836315833925635" data-datetime="2012-06-05T02:37:30+00:00">6月 5, 2012</a></blockquote>


<script src="http://pchw.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>という意見がありましたので，やってみました．</p>

<pre><code>$ bundle install --path vendor/bundle
</code></pre>

<p>とやると，<code>vendor/bundle</code>以下に<code>ruby/&lt;version&gt;/gems</code>やらなんやら色んなファイルが出来てました．</p>

<p>これでシステムグローバルに入れるのではなくて，そのProject内にgemsをインストールしているわけですね．</p>

<p>その後は，いつもどおり<code>rake</code>でいいのかな？と思ったのですが，</p>

<pre><code>$ rake
Could not find rake-0.9.2.2 in any of the sources
Run `bundle install` to install missing gems.
</code></pre>

<p>とかいう警告が出てました．
しかし，rake自体は成功している模様．よく分からない．</p>

<pre><code>$ bundle exec rake
</code></pre>

<p>とやる必要があるのかな？と思ったのですが，同じメッセージが出てました．
ここらへんはbundler詳しくないのでよく分からない，，，</p>

<p>何か分かったら教えて頂けるとありがたいです！</p>
]]></content>
  </entry>
  
</feed>
