<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyMotion | ぽっちぽちにしてやんよ]]></title>
  <link href="http://pchw.github.com/blog/categories/rubymotion/atom.xml" rel="self"/>
  <link href="http://pchw.github.com/"/>
  <updated>2012-05-30T21:05:15+09:00</updated>
  <id>http://pchw.github.com/</id>
  <author>
    <name><![CDATA[pchw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.8 リリースされてますね]]></title>
    <link href="http://pchw.github.com/blog/2012/05/30/18/"/>
    <updated>2012-05-30T20:52:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/30/18</id>
    <content type="html"><![CDATA[<p>リリース周期はやい！もう1.8が出てます．</p>

<pre><code>$ sudo motion update 
</code></pre>

<p>しましょう！今回は修正が少なめです．</p>

<pre><code>= RubyMotion 1.8 =

  * Fixed a bug in the generation of BridgeSupport files for multiple headers
    directories.
  * When building vendored projects, unset environment variables that could
    potentially make the build to fail.
    https://github.com/HipByte/motion-cocoapods/issues/12
</code></pre>

<ul>
<li>複数のヘッダディレクトリを指定したときのBridgeSupportファイル生成のとこのバグ修正</li>
<li>ベンダープロジェクトをビルドするときに環境変数CCが設定されてない時にビルド失敗する問題の修正．</li>
</ul>


<p>いつも誰かがRubyMotionの新しいバージョン出たって言ってるの見てアップデートしてるのが分かるんだけど，言ってる人はどうやって新しいバージョンが出たって知るんだろう？毎日<code>motion update</code>とかしてるのかな．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion 1.7出てます]]></title>
    <link href="http://pchw.github.com/blog/2012/05/29/17/"/>
    <updated>2012-05-29T08:14:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/29/17</id>
    <content type="html"><![CDATA[<p>RubyMotion 1.7が出てました．</p>

<pre><code>$ sudo motion update
</code></pre>

<p>しましょう！</p>

<p>ところで，RubyMotion がアップデートされたかどうかを素早く知る方法ってないんですかね．</p>

<pre><code>= RubyMotion 1.7 =

  * Fixed a bug in the compiler where the proper signature would not be used
    when defining informal protocol methods with CF types as arguments.
  * Fixed iOS constants to be looked up at demand (when being used) and not
    when the app starts, because certain constants are not set until a certain
    API is called (ex: the kAB... constants of the AddressBook framework).
    This change should also speed up a little bit the app starting time.
  * Fixed a bug in the compiler where very long selectors would be truncated
    and causing exceptions later at runtime.
  * Fixed a bug in the compiler where memory-related selectors (alloc, dealloc,
    retain, release, etc.) could not be defined in Ruby.
  * Fixed a bug in the compiler where NSObject instance methods could not be
    called on classes (ex. MyClass.performSelector(...)).
  * Fixed a bug in the build system where vendored 3rd-party APIs dealing with
    types defined in iOS headers could not be used (ex: enums or structs).
</code></pre>

<ul>
<li>非公式プロトコルでCFタイプを引数にとった時に正しいシグネチャを吐かないことの修正</li>
<li>アプリ開始時のiOS定数発見の部分を修正．この影響でアプリ開始時間がちょっと早くなる．</li>
<li>超長いセレクタが途中で切れて実行時エラーになる問題の修正</li>
<li>メモリ関係（allocとかreleaseとか）がRubyで定義出来なかったのを修正．</li>
<li>NSObjectのインスタンスメソッドをクラスから呼べなかった問題を修正</li>
<li>外部ベンダのライブラリを読み込むやつでiOSヘッダに定義されたenumとかstructsが使われなかった問題を修正</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion]Routableを使ってみた]]></title>
    <link href="http://pchw.github.com/blog/2012/05/28/routable/"/>
    <updated>2012-05-28T12:32:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/28/routable</id>
    <content type="html"><![CDATA[<p>Routableというgemがあるみたいという話を聞いて，使ってみました．</p>

<p><a href="https://github.com/clayallsopp/Routable">Routable - GitHub</a></p>

<h2>インストール</h2>

<pre><code>gem install routable
</code></pre>

<h2>Rakefileの編集</h2>

<pre><code>$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'routable'
</code></pre>

<p>のように<code>require 'routable'</code>を追加します．</p>

<h2>使い方</h2>

<pre><code>class AppDelegate
  def application(application, didFinishLaunchingWithOptions:launchOptions)
    @window = UIWindow.alloc.initWithFrame UIScreen.mainScreen.applicationFrame
    @window.makeKeyAndVisible

    @rootView = NSBundle.mainBundle.loadNibNamed(
        'RootViewController',
        owner: self,
        options: nil).first

    @router = Routable::Router.router
    @router.navigation_controller = UINavigationController.alloc.init
    @router.navigation_controller.pushViewController(@rootView, animated: false)
    @rootView.title = "TOP"

    @router.map("one", OneViewController)
    @router.map("two/:param", TwoViewController)

    @window.rootViewController = @router.navigation_controller

    @one = @rootView.view.viewWithTag 1
    @one.addTarget(
        self, 
        action: 'onClickOne:', 
        forControlEvents: UIControlEventTouchUpInside)

    @two = @rootView.view.viewWithTag 2
    @two.addTarget(
        self, 
        action: 'onClickTwo:', 
        forControlEvents: UIControlEventTouchUpInside)

    true
  end

  def onClickOne(sender)
    @router.open('one', true)
  end

  def onClickTwo(sender)
    @router.open('two/100', true)
  end
end
</code></pre>

<p>こんな感じで使います．</p>

<p><code>Routable::Router.router</code>を取得して，<code>navigation_controller</code>に<code>UINavigationController</code>を設定しておきます．</p>

<p><code>map(&lt;URL&gt;, &lt;viewController&gt;)</code>のようにすると，そのURL文字列をキーにviewControllerの遷移を書けるようになります．</p>

<p><URL>には<code>hoge/:id</code>のようにパラメータを記述することができて，この場合だと<code>hoge/1</code>とかいう遷移をさせれば，宛先のviewControllerに<code>1</code>というパラメータが渡されます．</p>

<p>遷移する時は<code>open(&lt;URL&gt;, &lt;animation?&gt;)</code>とすれば設定したviewControllerへ遷移出来ます．</p>

<h2>遷移先ViewController</h2>

<pre><code>class TwoViewController &lt; UIViewController
    attr_accessor :param

    def initWithParams(params = {})
        init()
        self.param = params[:param]
        self
    end

    def viewDidLoad
        @label = UILabel.alloc.init
        @label.bounds = [[50, 150],[300, 50]]
        @label.text = "TwoViewController" + self.param.to_s
    end
end
</code></pre>

<p>のようにして，<code>initWithParams</code>で引数を受け取れます．</p>

<h2>問題点</h2>

<p>ViewControllerをコードで場所設定とかすごくめんどくさいので，僕はIBを使います．</p>

<p>しかし，IBを使って<code>resouces/HogeViewController.xib</code>を作って，Controlを配置して，，，というフローを辿ってやると，<code>router.open</code>の時にエラーが出ます．</p>

<p>routerの内部では，<code>HogeViewController.alloc.initWithParams()</code>を呼んでインスタンス化しているわけですが，
xibを使うと，<code>NSBundle.mainBundle.loadNibNamed</code>をしないとダメっぽいんですね．</p>

<p>なので，routerをいじって，mapするときにそれ用の情報を入れてあげるかしないといけません．</p>

<h2>まとめ</h2>

<p>僕はStoryboardを使うと思います．</p>

<p>XCodeが嫌でRubyMotionをやっている人は多いと思うので，コードでControlを配置するのが苦じゃない人にとってはrouterはいいソリューションなんじゃないでしょうか．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RubyMotion]motion-liveを使ってみよう]]></title>
    <link href="http://pchw.github.com/blog/2012/05/27/live/"/>
    <updated>2012-05-27T11:17:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/27/live</id>
    <content type="html"><![CDATA[<p>RubyMotionは<code>rake</code>でBuildしてSimulatorが立ち上がります．</p>

<p>その後，Terminalはインタラクティブシェルになっていて，そこで行った操作がそのままSimulatorの方に反映されます．</p>

<p>ところが，そのインタラクティブシェルは1行しか打てなくて，そこで色々やろうとすると苦しいものがあります．</p>

<p>そこで登場するのが<strong>motion-live</strong>です．</p>

<p><a href="https://github.com/irrationalfab/motion-live">motion-live</a></p>

<p>これを導入すると，<code>LiveScratchpad.rb</code>というファイルを編集してセーブしたタイミングでインタラクティブシェルに引き渡されて実行されます．</p>

<h2>使い方</h2>

<p>まず，motion-liveをインストールします．</p>

<pre><code>$ gem install motion-live
Fetching: colored-1.2.gem (100%)
Fetching: rb-fsevent-0.9.1.gem (100%)
Fetching: motion-live-0.1.gem (100%)
Successfully installed colored-1.2
Successfully installed rb-fsevent-0.9.1
Successfully installed motion-live-0.1
3 gems installed
Installing ri documentation for colored-1.2...
Installing ri documentation for rb-fsevent-0.9.1...
Installing ri documentation for motion-live-0.1...
Installing RDoc documentation for colored-1.2...
Installing RDoc documentation for rb-fsevent-0.9.1...
Installing RDoc documentation for motion-live-0.1...
</code></pre>

<p>その後，プロジェクトのRakefileを編集します．
（既存の<code>motion crate</code>したのがないなら，<code>motion create &lt;hoge&gt;</code>しましょう）</p>

<pre><code>$ more Rakefile
$:.unshift("/Library/RubyMotion/lib")
require 'motion/project'
require 'motion-live'

Motion::Project::App.setup do |app|
  # Use `rake config' to see complete project settings.
  app.name = 'hoge'
end
</code></pre>

<p>変更点は<code>require 'motion-live'</code>を追加しただけです．</p>

<p>あとは，実行します．</p>

<pre><code>$ rake live
</code></pre>

<p>するとSimulatorが立ち上がり，ディレクトリに<code>LiveScratchpad.rb</code>が出来上がるので，編集保存するとインタラクティブシェルで実行されます．</p>

<h2>利点</h2>

<p>motion-liveを使った時の利点です．</p>

<h3>複数行のコードをインタラクティブシェルに読ませれる</h3>

<p>これによって，何回も使う処理をclassとかmethodにして使うとかいうのも簡単にかけます．</p>

<h3>自分の好きなエディタが使える</h3>

<p>インタラクティブシェルではTerminalの上で書くので，補完も効かなければ，キーバインディングも違って色々不便です．</p>

<p>しかし，motion-liveを使うと，<code>LiveScratchpad.rb</code>というファイルを編集出来ればいいのです．</p>

<p>つまり，EmacsやVimも使えますし，補完を効かせれるTextMateやRedcarを使うことも出来ます．
<a href="http://pchw.github.com/blog/2012/05/27/st2/">前の記事</a>で書いたようにSublime Text2も補完を効かせれるようになったので，僕はSublime Text2を使ってます．</p>

<pre><code>app = UIApplication.sharedApplication
delegate = app.delegate
repl(delegate)
@window
</code></pre>

<p>みたいなのを書く時でも，すごい楽なわけです．</p>

<p>セットアップも有効にするのもRakefileに1行追加ですし，簡単で積極的に使って行きたいですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2でRubyMotionの補完が出来るようになったぞおおおお]]></title>
    <link href="http://pchw.github.com/blog/2012/05/27/st2/"/>
    <updated>2012-05-27T10:04:00+09:00</updated>
    <id>http://pchw.github.com/blog/2012/05/27/st2</id>
    <content type="html"><![CDATA[<p><img src="/images/st2.png" alt="catch" /></p>

<p>ついに来ました！</p>

<p>いままで，RubyMotionを書いていて補完が効くのはVimとredcarとTextMateだけでした！
ところが，RubyMotionのフォーラムに「[RubyMotion] Sublime Text 2 Support」という質問が投げかけられ，ついに今日そのパッケージが登場しました！</p>

<p><a href="https://github.com/diemer/RubyMotionSublimeCompletions">RubyMotionSublimeCompletions</a></p>

<p>インストール方法は簡単で，</p>

<pre><code>$ cd ~/Library/Application Support/Sublime Text 2/Packages
$ git clone git://github.com/diemer/RubyMotionSublimeCompletions.git
</code></pre>

<p>してSublime Text2を再起動すればOKです．</p>

<p>PackageControlを導入している人なら，</p>

<pre><code>Cmd+Shift+p
Package Control: Add Repository
https://github.com/diemer/RubyMotionSublimeCompletions
Package Control: Install Package
RubyMotionSublimeCompletions
</code></pre>

<p>でインストール出来るはずです．</p>

<p>後は，普通にエディタを起動して<code>UIApp</code>とか打てば，補完に<code>UIApplication</code>とか<code>UIAppearance</code>とか出るようになります！</p>
]]></content>
  </entry>
  
</feed>
